###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.4.261/W32 for ARM         10/Jan/2021  16:10:21
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Source\System\uCOS-III\Source\os_tick.c
#    Command line      =
#        -f C:\Users\macanlin\AppData\Local\Temp\EWEC7F.tmp
#        ("C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Source\System\uCOS-III\Source\os_tick.c" -D USE_STDPERIPH_DRIVER
#        -D STM32F072 -lC
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\List" -o
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        C:\rj\IAR\arm\inc\c\DLib_Config_Normal.h -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\BSP\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\FWLib\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\CMSIS\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\OS_Cfg\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-CPU\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-LIB\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uCOS-III\Ports\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uCOS-III\Source\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\APP\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\FWLib\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-LIB\\" -Ol -I
#        C:\rj\IAR\arm\CMSIS\Core\Include\\ -I
#        C:\rj\IAR\arm\CMSIS\DSP\Include\\)
#    Locale            =  C
#    List file         =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\List\os_tick.lst
#    Object file       =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\Obj\os_tick.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#
###############################################################################

C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345 -1-9\Source\System\uCOS-III\Source\os_tick.c
      1          /*
      2          ***********************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2012; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                                   TICK MANAGEMENT
     10          *
     11          * File    : OS_TICK.C
     12          * By      : JJL
     13          * Version : V3.03.01
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
     20          *           application/product.   We provide ALL the source code for your convenience and to help you 
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
     30          ************************************************************************************************************************
     31          */
     32          
     33          #define  MICRIUM_SOURCE
     34          #include <os.h>
     35          
     36          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     37          const  CPU_CHAR  *os_tick__c = "$Id: $";
     38          #endif
     39          
     40          /*
     41          ************************************************************************************************************************
     42          *                                                  LOCAL PROTOTYPES
     43          ************************************************************************************************************************
     44          */
     45          
     46          
     47          /*
     48          ************************************************************************************************************************
     49          *                                                      TICK TASK
     50          *
     51          * Description: This task is internal to uC/OS-III and is triggered by the tick interrupt.
     52          *
     53          * Arguments  : p_arg     is an argument passed to the task when the task is created (unused).
     54          *
     55          * Returns    : none
     56          *
     57          * Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
     58          ************************************************************************************************************************
     59          */
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void  OS_TickTask (void  *p_arg)
     62          {
   \                     OS_TickTask: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
     63              OS_ERR  err;
     64              CPU_TS  ts;
     65          
     66          
     67              p_arg = p_arg;                                          /* Prevent compiler warning                               */
     68          
     69              while (DEF_ON) {
     70                  (void)OSTaskSemPend((OS_TICK  )0,
     71                                      (OS_OPT   )OS_OPT_PEND_BLOCKING,
     72                                      (CPU_TS  *)&ts,
     73                                      (OS_ERR  *)&err);               /* Wait for signal from tick interrupt                    */
   \                     ??OS_TickTask_0: (+1)
   \        0x2   0x466B             MOV      R3,SP
   \        0x4   0xAA01             ADD      R2,SP,#+4
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x....'....        BL       OSTaskSemPend
     74                  if (err == OS_ERR_NONE) {
   \        0xE   0x4668             MOV      R0,SP
   \       0x10   0x8800             LDRH     R0,[R0, #+0]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD1F5             BNE      ??OS_TickTask_0
     75                      if (OSRunning == OS_STATE_OS_RUNNING) {
   \       0x16   0x....             LDR      R0,??DataTable4
   \       0x18   0x7800             LDRB     R0,[R0, #+0]
   \       0x1A   0x2801             CMP      R0,#+1
   \       0x1C   0xD1F1             BNE      ??OS_TickTask_0
     76                          OS_TickListUpdate();                        /* Update all tasks waiting for time                      */
   \       0x1E   0x....'....        BL       OS_TickListUpdate
   \       0x22   0xE7EE             B        ??OS_TickTask_0
     77                      }
     78                  }
     79              }
     80          }
     81          
     82          /*$PAGE*/
     83          /*
     84          ************************************************************************************************************************
     85          *                                                 INITIALIZE TICK TASK
     86          *
     87          * Description: This function is called by OSInit() to create the tick task.
     88          *
     89          * Arguments  : p_err   is a pointer to a variable that will hold the value of an error code:
     90          *
     91          *                          OS_ERR_TICK_STK_INVALID   if the pointer to the tick task stack is a NULL pointer
     92          *                          OS_ERR_TICK_STK_SIZE      indicates that the specified stack size
     93          *                          OS_ERR_PRIO_INVALID       if the priority you specified in the configuration is invalid
     94          *                                                      (There could be only one task at the Idle Task priority)
     95          *                                                      (Maybe the priority you specified is higher than OS_CFG_PRIO_MAX-1
     96          *                          OS_ERR_??                 other error code returned by OSTaskCreate()
     97          *
     98          * Returns    : none
     99          *
    100          * Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
    101          ************************************************************************************************************************
    102          */
    103          

   \                                 In section .text, align 2, keep-with-next
    104          void  OS_TickTaskInit (OS_ERR  *p_err)
    105          {
   \                     OS_TickTaskInit: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB089             SUB      SP,SP,#+36
   \        0x4   0x0004             MOVS     R4,R0
    106          #ifdef OS_SAFETY_CRITICAL
    107              if (p_err == (OS_ERR *)0) {
    108                  OS_SAFETY_CRITICAL_EXCEPTION();
    109                  return;
    110              }
    111          #endif
    112          
    113              OSTickCtr         = (OS_TICK)0u;                        /* Clear the tick counter                                 */
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x....             LDR      R1,??DataTable4_1
   \        0xA   0x6008             STR      R0,[R1, #+0]
    114          
    115              OSTickTaskTimeMax = (CPU_TS)0u;
   \        0xC   0x....             LDR      R1,??DataTable4_2
   \        0xE   0x6008             STR      R0,[R1, #+0]
    116          
    117          
    118              OS_TickListInit();                                      /* Initialize the tick list data structures               */
   \       0x10   0x....'....        BL       OS_TickListInit
    119          
    120                                                                      /* ---------------- CREATE THE TICK TASK ---------------- */
    121              if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
   \       0x14   0x....             LDR      R0,??DataTable4_3
   \       0x16   0x6801             LDR      R1,[R0, #+0]
   \       0x18   0x2900             CMP      R1,#+0
   \       0x1A   0xD102             BNE      ??OS_TickTaskInit_0
    122                 *p_err = OS_ERR_TICK_STK_INVALID;
   \       0x1C   0x....             LDR      R0,??DataTable4_4  ;; 0x7212
   \       0x1E   0x8020             STRH     R0,[R4, #+0]
    123                  return;
   \       0x20   0xE027             B        ??OS_TickTaskInit_1
    124              }
    125          
    126              if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
   \                     ??OS_TickTaskInit_0: (+1)
   \       0x22   0x....             LDR      R1,??DataTable4_5
   \       0x24   0x680A             LDR      R2,[R1, #+0]
   \       0x26   0x....             LDR      R3,??DataTable4_6
   \       0x28   0x681B             LDR      R3,[R3, #+0]
   \       0x2A   0x429A             CMP      R2,R3
   \       0x2C   0xD202             BCS      ??OS_TickTaskInit_2
    127                 *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
   \       0x2E   0x....             LDR      R0,??DataTable4_7  ;; 0x7213
   \       0x30   0x8020             STRH     R0,[R4, #+0]
    128                  return;
   \       0x32   0xE01E             B        ??OS_TickTaskInit_1
    129              }
    130          
    131              if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {     /* Only one task at the 'Idle Task' priority              */
   \                     ??OS_TickTaskInit_2: (+1)
   \       0x34   0x....             LDR      R2,??DataTable4_8
   \       0x36   0x7813             LDRB     R3,[R2, #+0]
   \       0x38   0x2B0F             CMP      R3,#+15
   \       0x3A   0xD302             BCC      ??OS_TickTaskInit_3
    132                 *p_err = OS_ERR_TICK_PRIO_INVALID;
   \       0x3C   0x....             LDR      R0,??DataTable4_9  ;; 0x7211
   \       0x3E   0x8020             STRH     R0,[R4, #+0]
    133                  return;
   \       0x40   0xE017             B        ??OS_TickTaskInit_1
    134              }
    135          
    136              OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
    137                           (CPU_CHAR   *)((void *)"uC/OS-III Tick Task"),
    138                           (OS_TASK_PTR )OS_TickTask,
    139                           (void       *)0,
    140                           (OS_PRIO     )OSCfg_TickTaskPrio,
    141                           (CPU_STK    *)OSCfg_TickTaskStkBasePtr,
    142                           (CPU_STK_SIZE)OSCfg_TickTaskStkLimit,
    143                           (CPU_STK_SIZE)OSCfg_TickTaskStkSize,
    144                           (OS_MSG_QTY  )0u,
    145                           (OS_TICK     )0u,
    146                           (void       *)0,
    147                           (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
    148                           (OS_ERR     *)p_err);
   \                     ??OS_TickTaskInit_3: (+1)
   \       0x42   0x9408             STR      R4,[SP, #+32]
   \       0x44   0x230B             MOVS     R3,#+11
   \       0x46   0x9307             STR      R3,[SP, #+28]
   \       0x48   0x2300             MOVS     R3,#+0
   \       0x4A   0x9306             STR      R3,[SP, #+24]
   \       0x4C   0x2300             MOVS     R3,#+0
   \       0x4E   0x9305             STR      R3,[SP, #+20]
   \       0x50   0x2300             MOVS     R3,#+0
   \       0x52   0x9304             STR      R3,[SP, #+16]
   \       0x54   0x6809             LDR      R1,[R1, #+0]
   \       0x56   0x9103             STR      R1,[SP, #+12]
   \       0x58   0x....             LDR      R1,??DataTable4_10
   \       0x5A   0x6809             LDR      R1,[R1, #+0]
   \       0x5C   0x9102             STR      R1,[SP, #+8]
   \       0x5E   0x6800             LDR      R0,[R0, #+0]
   \       0x60   0x9001             STR      R0,[SP, #+4]
   \       0x62   0x7810             LDRB     R0,[R2, #+0]
   \       0x64   0x9000             STR      R0,[SP, #+0]
   \       0x66   0x2300             MOVS     R3,#+0
   \       0x68   0x....             LDR      R2,??DataTable4_11
   \       0x6A   0x....             LDR      R1,??DataTable4_12
   \       0x6C   0x....             LDR      R0,??DataTable4_13
   \       0x6E   0x....'....        BL       OSTaskCreate
    149          }
   \                     ??OS_TickTaskInit_1: (+1)
   \       0x72   0xB00A             ADD      SP,SP,#+40
   \       0x74   0xBD10             POP      {R4,PC}          ;; return
    150          
    151          /*$PAGE*/
    152          /*
    153          ************************************************************************************************************************
    154          *                                               INITIALIZE THE TICK LIST
    155          *
    156          * Description: This function initializes the tick handling data structures of uC/OS-III.
    157          *
    158          * Arguments  : none
    159          *
    160          * Returns    : None
    161          *
    162          * Note(s)    : This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    163          ************************************************************************************************************************
    164          */
    165          

   \                                 In section .text, align 2, keep-with-next
    166          void  OS_TickListInit (void)
    167          {
   \                     OS_TickListInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    168              OS_TICK_SPOKE_IX   i;
    169              OS_TICK_SPOKE     *p_spoke;
    170          
    171          
    172          
    173              for (i = 0u; i < OSCfg_TickWheelSize; i++) {
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x0001             MOVS     R1,R0
   \        0x6   0xE00B             B        ??OS_TickListInit_0
    174                  p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
   \                     ??OS_TickListInit_1: (+1)
   \        0x8   0x....             LDR      R2,??DataTable4_14
   \        0xA   0x000B             MOVS     R3,R1
   \        0xC   0xB29B             UXTH     R3,R3
   \        0xE   0x2408             MOVS     R4,#+8
   \       0x10   0x435C             MULS     R4,R3,R4
   \       0x12   0x1912             ADDS     R2,R2,R4
    175                  p_spoke->FirstPtr      = (OS_TCB        *)0;
   \       0x14   0x6010             STR      R0,[R2, #+0]
    176                  p_spoke->NbrEntries    = (OS_OBJ_QTY     )0u;
   \       0x16   0x0003             MOVS     R3,R0
   \       0x18   0x8093             STRH     R3,[R2, #+4]
    177                  p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
   \       0x1A   0x0003             MOVS     R3,R0
   \       0x1C   0x80D3             STRH     R3,[R2, #+6]
    178              }
   \       0x1E   0x1C49             ADDS     R1,R1,#+1
   \                     ??OS_TickListInit_0: (+1)
   \       0x20   0x000A             MOVS     R2,R1
   \       0x22   0x....             LDR      R3,??DataTable4_15
   \       0x24   0x881B             LDRH     R3,[R3, #+0]
   \       0x26   0xB292             UXTH     R2,R2
   \       0x28   0x429A             CMP      R2,R3
   \       0x2A   0xD3ED             BCC      ??OS_TickListInit_1
    179          }
   \       0x2C   0xBD10             POP      {R4,PC}          ;; return
    180          
    181          /*$PAGE*/
    182          /*
    183          ************************************************************************************************************************
    184          *                                                ADD TASK TO TICK LIST
    185          *
    186          * Description: This function is called to place a task in a list of task waiting for either time to expire or waiting to
    187          *              timeout on a pend call.
    188          *
    189          * Arguments  : p_tcb          is a pointer to the OS_TCB of the task to add to the tick list
    190          *              -----
    191          *
    192          *              time           represents either the 'match' value of OSTickCtr or a relative time from the current
    193          *                             value of OSTickCtr as specified by the 'opt' argument..
    194          *
    195          *                             relative when 'opt' is set to OS_OPT_TIME_DLY
    196          *                             relative when 'opt' is set to OS_OPT_TIME_TIMEOUT
    197          *                             match    when 'opt' is set to OS_OPT_TIME_MATCH
    198          *                             periodic when 'opt' is set to OS_OPT_TIME_PERIODIC
    199          *
    200          *              opt            is an option specifying how to calculate time.  The valid values are:
    201          *              ---
    202          *                                 OS_OPT_TIME_DLY
    203          *                                 OS_OPT_TIME_TIMEOUT
    204          *                                 OS_OPT_TIME_PERIODIC
    205          *                                 OS_OPT_TIME_MATCH
    206          *
    207          *              p_err          is a pointer to a variable that will contain an error code returned by this function.
    208          *              -----
    209          *                                 OS_ERR_NONE           the call was successful and the time delay was scheduled.
    210          *                                 OS_ERR_TIME_ZERO_DLY  if delay is zero or already occurred.
    211          *
    212          * Returns    : None
    213          *
    214          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    215          *
    216          *              2) This function is assumed to be called with interrupts disabled.
    217          ************************************************************************************************************************
    218          */
    219          

   \                                 In section .text, align 2, keep-with-next
    220          void  OS_TickListInsert (OS_TCB   *p_tcb,
    221                                   OS_TICK   time,
    222                                   OS_OPT    opt,
    223                                   OS_ERR   *p_err)
    224          {
   \                     OS_TickListInsert: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x001D             MOVS     R5,R3
    225              OS_TICK            tick_delta;
    226              OS_TICK            tick_next;
    227              OS_TICK_SPOKE     *p_spoke;
    228              OS_TCB            *p_tcb0;
    229              OS_TCB            *p_tcb1;
    230              OS_TICK_SPOKE_IX   spoke;
    231          
    232          
    233          
    234              if (opt == OS_OPT_TIME_MATCH) {                              /* Task time is absolute.                            */
   \        0x6   0x0010             MOVS     R0,R2
   \        0x8   0xB280             UXTH     R0,R0
   \        0xA   0x2804             CMP      R0,#+4
   \        0xC   0xD124             BNE      ??OS_TickListInsert_0
    235                  tick_delta = time - OSTickCtr - 1u;
   \        0xE   0x....             LDR      R0,??DataTable4_1
   \       0x10   0x6800             LDR      R0,[R0, #+0]
   \       0x12   0x1A08             SUBS     R0,R1,R0
   \       0x14   0x1E40             SUBS     R0,R0,#+1
    236                  if (tick_delta > OS_TICK_TH_RDY) {                       /* If delay already occurred, ...                    */
   \       0x16   0x....             LDR      R2,??DataTable4_16  ;; 0xffff0001
   \       0x18   0x4290             CMP      R0,R2
   \       0x1A   0xD306             BCC      ??OS_TickListInsert_1
    237                      p_tcb->TickCtrMatch = (OS_TICK        )0u;
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0x64E0             STR      R0,[R4, #+76]
    238                      p_tcb->TickRemain   = (OS_TICK        )0u;
   \       0x20   0x6520             STR      R0,[R4, #+80]
    239                      p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
   \       0x22   0x61E0             STR      R0,[R4, #+28]
    240                     *p_err               =  OS_ERR_TIME_ZERO_DLY;         /* ... do NOT delay.                                 */
   \       0x24   0x....             LDR      R0,??DataTable4_17  ;; 0x727e
   \       0x26   0x8028             STRH     R0,[R5, #+0]
    241                      return;
   \       0x28   0xE06F             B        ??OS_TickListInsert_2
    242                  }
    243                  p_tcb->TickCtrMatch = time;
   \                     ??OS_TickListInsert_1: (+1)
   \       0x2A   0x64E1             STR      R1,[R4, #+76]
    244                  p_tcb->TickRemain   = tick_delta + 1u;
   \       0x2C   0x1C40             ADDS     R0,R0,#+1
   \       0x2E   0x6520             STR      R0,[R4, #+80]
    245          
    246              } else if (time > (OS_TICK)0u) {
    247                  if (opt == OS_OPT_TIME_PERIODIC) {                       /* Task time is periodic.                            */
    248                      tick_next  = p_tcb->TickCtrPrev + time;
    249                      tick_delta = tick_next - OSTickCtr - 1u;
    250                      if (tick_delta < time) {                             /* If next periodic delay did NOT already occur, ... */
    251                          p_tcb->TickCtrMatch = tick_next;                 /* ... set  next  periodic delay;                ... */
    252                      } else {
    253                          p_tcb->TickCtrMatch = OSTickCtr + time;          /* ... else reset periodic delay.                    */
    254                      }
    255                      p_tcb->TickRemain   = p_tcb->TickCtrMatch - OSTickCtr;
    256                      p_tcb->TickCtrPrev  = p_tcb->TickCtrMatch;
    257          
    258                  } else {                                                 /* Task time is relative to current.                 */
    259                      p_tcb->TickCtrMatch = OSTickCtr + time;
    260                      p_tcb->TickRemain   = time;
    261                  }
    262          
    263              } else {                                                     /* Zero time delay; ...                              */
    264                  p_tcb->TickCtrMatch = (OS_TICK        )0u;
    265                  p_tcb->TickRemain   = (OS_TICK        )0u;
    266                  p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
    267                 *p_err               =  OS_ERR_TIME_ZERO_DLY;             /* ... do NOT delay.                                 */
    268                  return;
    269              }
    270          
    271          
    272              spoke   = (OS_TICK_SPOKE_IX)(p_tcb->TickCtrMatch % OSCfg_TickWheelSize);
   \                     ??OS_TickListInsert_3: (+1)
   \       0x30   0x6CE0             LDR      R0,[R4, #+76]
   \       0x32   0x....             LDR      R1,??DataTable4_15
   \       0x34   0x8809             LDRH     R1,[R1, #+0]
   \       0x36   0x....'....        BL       __aeabi_uidivmod
    273              p_spoke = &OSCfg_TickWheel[spoke];
   \       0x3A   0x....             LDR      R0,??DataTable4_14
   \       0x3C   0xB289             UXTH     R1,R1
   \       0x3E   0x2208             MOVS     R2,#+8
   \       0x40   0x434A             MULS     R2,R1,R2
   \       0x42   0x1880             ADDS     R0,R0,R2
    274          
    275              if (p_spoke->NbrEntries == (OS_OBJ_QTY)0u) {                 /* First entry in the spoke                          */
   \       0x44   0x8881             LDRH     R1,[R0, #+4]
   \       0x46   0x2900             CMP      R1,#+0
   \       0x48   0xD12C             BNE      ??OS_TickListInsert_4
    276                  p_tcb->TickNextPtr   = (OS_TCB   *)0;
   \       0x4A   0x2100             MOVS     R1,#+0
   \       0x4C   0x6161             STR      R1,[R4, #+20]
    277                  p_tcb->TickPrevPtr   = (OS_TCB   *)0;
   \       0x4E   0x61A1             STR      R1,[R4, #+24]
    278                  p_spoke->FirstPtr    =  p_tcb;
   \       0x50   0x6004             STR      R4,[R0, #+0]
    279                  p_spoke->NbrEntries  = (OS_OBJ_QTY)1u;
   \       0x52   0x2101             MOVS     R1,#+1
   \       0x54   0x8081             STRH     R1,[R0, #+4]
   \       0x56   0xE04F             B        ??OS_TickListInsert_5
    280              } else {
   \                     ??OS_TickListInsert_0: (+1)
   \       0x58   0x2900             CMP      R1,#+0
   \       0x5A   0xD01C             BEQ      ??OS_TickListInsert_6
   \       0x5C   0xB292             UXTH     R2,R2
   \       0x5E   0x2A08             CMP      R2,#+8
   \       0x60   0xD113             BNE      ??OS_TickListInsert_7
   \       0x62   0x6CA0             LDR      R0,[R4, #+72]
   \       0x64   0x1843             ADDS     R3,R0,R1
   \       0x66   0x....             LDR      R0,??DataTable4_1
   \       0x68   0x6802             LDR      R2,[R0, #+0]
   \       0x6A   0x1A9A             SUBS     R2,R3,R2
   \       0x6C   0x1E52             SUBS     R2,R2,#+1
   \       0x6E   0x428A             CMP      R2,R1
   \       0x70   0xD201             BCS      ??OS_TickListInsert_8
   \       0x72   0x64E3             STR      R3,[R4, #+76]
   \       0x74   0xE002             B        ??OS_TickListInsert_9
   \                     ??OS_TickListInsert_8: (+1)
   \       0x76   0x6802             LDR      R2,[R0, #+0]
   \       0x78   0x1851             ADDS     R1,R2,R1
   \       0x7A   0x64E1             STR      R1,[R4, #+76]
   \                     ??OS_TickListInsert_9: (+1)
   \       0x7C   0x6CE1             LDR      R1,[R4, #+76]
   \       0x7E   0x6800             LDR      R0,[R0, #+0]
   \       0x80   0x1A08             SUBS     R0,R1,R0
   \       0x82   0x6520             STR      R0,[R4, #+80]
   \       0x84   0x6CE0             LDR      R0,[R4, #+76]
   \       0x86   0x64A0             STR      R0,[R4, #+72]
   \       0x88   0xE7D2             B        ??OS_TickListInsert_3
   \                     ??OS_TickListInsert_7: (+1)
   \       0x8A   0x....             LDR      R0,??DataTable4_1
   \       0x8C   0x6800             LDR      R0,[R0, #+0]
   \       0x8E   0x1840             ADDS     R0,R0,R1
   \       0x90   0x64E0             STR      R0,[R4, #+76]
   \       0x92   0x6521             STR      R1,[R4, #+80]
   \       0x94   0xE7CC             B        ??OS_TickListInsert_3
   \                     ??OS_TickListInsert_6: (+1)
   \       0x96   0x2000             MOVS     R0,#+0
   \       0x98   0x64E0             STR      R0,[R4, #+76]
   \       0x9A   0x6520             STR      R0,[R4, #+80]
   \       0x9C   0x61E0             STR      R0,[R4, #+28]
   \       0x9E   0x....             LDR      R0,??DataTable4_17  ;; 0x727e
   \       0xA0   0x8028             STRH     R0,[R5, #+0]
   \       0xA2   0xE032             B        ??OS_TickListInsert_2
    281                  p_tcb1     = p_spoke->FirstPtr;                          /* Point to current first TCB in the list            */
   \                     ??OS_TickListInsert_4: (+1)
   \       0xA4   0x6801             LDR      R1,[R0, #+0]
   \       0xA6   0xE00E             B        ??OS_TickListInsert_10
    282                  while (p_tcb1 != (OS_TCB *)0) {
    283                      p_tcb1->TickRemain = p_tcb1->TickCtrMatch            /* Compute time remaining of current TCB in list     */
    284                                         - OSTickCtr;
    285                      if (p_tcb->TickRemain > p_tcb1->TickRemain) {        /* Do we need to insert AFTER current TCB in list?   */
    286                          if (p_tcb1->TickNextPtr != (OS_TCB *)0) {        /* Yes, are we pointing at the last TCB in the list? */
    287                              p_tcb1               =  p_tcb1->TickNextPtr; /* No,  Point to next TCB in the list                */
    288                          } else {
    289                              p_tcb->TickNextPtr   = (OS_TCB *)0;
    290                              p_tcb->TickPrevPtr   =  p_tcb1;
    291                              p_tcb1->TickNextPtr  =  p_tcb;               /* Yes, TCB to add is now new last entry in the list */
    292                              p_tcb1               = (OS_TCB *)0;          /* Break loop                                        */
    293                          }
    294                      } else {                                             /* Insert before the current TCB                     */
    295                          if (p_tcb1->TickPrevPtr == (OS_TCB *)0) {        /* Are we inserting before the first TCB?            */
    296                              p_tcb->TickPrevPtr   = (OS_TCB *)0;
    297                              p_tcb->TickNextPtr   =  p_tcb1;
    298                              p_tcb1->TickPrevPtr  =  p_tcb;
    299                              p_spoke->FirstPtr    =  p_tcb;
    300                          } else {                                         /* Insert in between 2 TCBs already in the list      */
    301                              p_tcb0               =  p_tcb1->TickPrevPtr;
   \                     ??OS_TickListInsert_11: (+1)
   \       0xA8   0x698A             LDR      R2,[R1, #+24]
    302                              p_tcb->TickPrevPtr   =  p_tcb0;
   \       0xAA   0x61A2             STR      R2,[R4, #+24]
    303                              p_tcb->TickNextPtr   =  p_tcb1;
   \       0xAC   0x6161             STR      R1,[R4, #+20]
    304                              p_tcb0->TickNextPtr  =  p_tcb;
   \       0xAE   0x6154             STR      R4,[R2, #+20]
    305                              p_tcb1->TickPrevPtr  =  p_tcb;
   \       0xB0   0x618C             STR      R4,[R1, #+24]
   \       0xB2   0xE007             B        ??OS_TickListInsert_12
    306                          }
   \                     ??OS_TickListInsert_13: (+1)
   \       0xB4   0x698A             LDR      R2,[R1, #+24]
   \       0xB6   0x2A00             CMP      R2,#+0
   \       0xB8   0xD1F6             BNE      ??OS_TickListInsert_11
   \       0xBA   0x2200             MOVS     R2,#+0
   \       0xBC   0x61A2             STR      R2,[R4, #+24]
   \       0xBE   0x6161             STR      R1,[R4, #+20]
   \       0xC0   0x618C             STR      R4,[R1, #+24]
   \       0xC2   0x6004             STR      R4,[R0, #+0]
    307                          p_tcb1 = (OS_TCB *)0;                            /* Break loop                                        */
   \                     ??OS_TickListInsert_12: (+1)
   \       0xC4   0x2100             MOVS     R1,#+0
    308                      }
   \                     ??OS_TickListInsert_10: (+1)
   \       0xC6   0x2900             CMP      R1,#+0
   \       0xC8   0xD013             BEQ      ??OS_TickListInsert_14
   \       0xCA   0x6CCA             LDR      R2,[R1, #+76]
   \       0xCC   0x....             LDR      R3,??DataTable4_1
   \       0xCE   0x681B             LDR      R3,[R3, #+0]
   \       0xD0   0x1AD2             SUBS     R2,R2,R3
   \       0xD2   0x650A             STR      R2,[R1, #+80]
   \       0xD4   0x6D0A             LDR      R2,[R1, #+80]
   \       0xD6   0x6D23             LDR      R3,[R4, #+80]
   \       0xD8   0x429A             CMP      R2,R3
   \       0xDA   0xD2EB             BCS      ??OS_TickListInsert_13
   \       0xDC   0x694A             LDR      R2,[R1, #+20]
   \       0xDE   0x2A00             CMP      R2,#+0
   \       0xE0   0xD001             BEQ      ??OS_TickListInsert_15
   \       0xE2   0x6949             LDR      R1,[R1, #+20]
   \       0xE4   0xE7EF             B        ??OS_TickListInsert_10
   \                     ??OS_TickListInsert_15: (+1)
   \       0xE6   0x2200             MOVS     R2,#+0
   \       0xE8   0x6162             STR      R2,[R4, #+20]
   \       0xEA   0x61A1             STR      R1,[R4, #+24]
   \       0xEC   0x614C             STR      R4,[R1, #+20]
   \       0xEE   0x0011             MOVS     R1,R2
   \       0xF0   0xE7E9             B        ??OS_TickListInsert_10
    309                  }
    310                  p_spoke->NbrEntries++;
   \                     ??OS_TickListInsert_14: (+1)
   \       0xF2   0x8881             LDRH     R1,[R0, #+4]
   \       0xF4   0x1C49             ADDS     R1,R1,#+1
   \       0xF6   0x8081             STRH     R1,[R0, #+4]
    311              }
    312              if (p_spoke->NbrEntriesMax < p_spoke->NbrEntries) {          /* Keep track of maximum # of entries in each spoke  */
   \                     ??OS_TickListInsert_5: (+1)
   \       0xF8   0x88C1             LDRH     R1,[R0, #+6]
   \       0xFA   0x8882             LDRH     R2,[R0, #+4]
   \       0xFC   0x4291             CMP      R1,R2
   \       0xFE   0xD201             BCS      ??OS_TickListInsert_16
    313                  p_spoke->NbrEntriesMax = p_spoke->NbrEntries;
   \      0x100   0x8881             LDRH     R1,[R0, #+4]
   \      0x102   0x80C1             STRH     R1,[R0, #+6]
    314              }
    315              p_tcb->TickSpokePtr = p_spoke;                               /* Link back to tick spoke                           */
   \                     ??OS_TickListInsert_16: (+1)
   \      0x104   0x61E0             STR      R0,[R4, #+28]
    316             *p_err               = OS_ERR_NONE;
   \      0x106   0x2000             MOVS     R0,#+0
   \      0x108   0x8028             STRH     R0,[R5, #+0]
    317          }
   \                     ??OS_TickListInsert_2: (+1)
   \      0x10A   0xBD30             POP      {R4,R5,PC}       ;; return
    318          
    319          /*$PAGE*/
    320          /*
    321          ************************************************************************************************************************
    322          *                                         REMOVE A TASK FROM THE TICK LIST
    323          *
    324          * Description: This function is called to remove a task from the tick list
    325          *
    326          * Arguments  : p_tcb          Is a pointer to the OS_TCB to remove.
    327          *              -----
    328          *
    329          * Returns    : none
    330          *
    331          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    332          *
    333          *              2) This function is assumed to be called with interrupts disabled.
    334          ************************************************************************************************************************
    335          */
    336          

   \                                 In section .text, align 2, keep-with-next
    337          void  OS_TickListRemove (OS_TCB  *p_tcb)
    338          {
   \                     OS_TickListRemove: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    339              OS_TICK_SPOKE  *p_spoke;
    340              OS_TCB         *p_tcb1;
    341              OS_TCB         *p_tcb2;
    342          
    343          
    344          
    345              p_spoke = p_tcb->TickSpokePtr;
   \        0x2   0x69C1             LDR      R1,[R0, #+28]
    346              if (p_spoke != (OS_TICK_SPOKE *)0) {                              /* Confirm that task is in tick list            */
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD017             BEQ      ??OS_TickListRemove_0
    347                  p_tcb->TickRemain = (OS_TICK)0u;
   \        0x8   0x2400             MOVS     R4,#+0
   \        0xA   0x6504             STR      R4,[R0, #+80]
    348                  if (p_spoke->FirstPtr == p_tcb) {                             /* Is timer to remove at the beginning of list? */
   \        0xC   0x680A             LDR      R2,[R1, #+0]
   \        0xE   0x4282             CMP      R2,R0
   \       0x10   0xD105             BNE      ??OS_TickListRemove_1
    349                      p_tcb1            = (OS_TCB *)p_tcb->TickNextPtr;         /* Yes                                          */
   \       0x12   0x6942             LDR      R2,[R0, #+20]
    350                      p_spoke->FirstPtr = p_tcb1;
   \       0x14   0x600A             STR      R2,[R1, #+0]
    351                      if (p_tcb1 != (OS_TCB *)0) {
   \       0x16   0x2A00             CMP      R2,#+0
   \       0x18   0xD007             BEQ      ??OS_TickListRemove_2
    352                          p_tcb1->TickPrevPtr = (OS_TCB *)0;
   \       0x1A   0x6194             STR      R4,[R2, #+24]
   \       0x1C   0xE005             B        ??OS_TickListRemove_2
    353                      }
    354                  } else {
    355                      p_tcb1              = p_tcb->TickPrevPtr;                 /* No, remove timer from somewhere in the list  */
   \                     ??OS_TickListRemove_1: (+1)
   \       0x1E   0x6982             LDR      R2,[R0, #+24]
    356                      p_tcb2              = p_tcb->TickNextPtr;
   \       0x20   0x6943             LDR      R3,[R0, #+20]
    357                      p_tcb1->TickNextPtr = p_tcb2;
   \       0x22   0x6153             STR      R3,[R2, #+20]
    358                      if (p_tcb2 != (OS_TCB *)0) {
   \       0x24   0x2B00             CMP      R3,#+0
   \       0x26   0xD000             BEQ      ??OS_TickListRemove_2
    359                          p_tcb2->TickPrevPtr = p_tcb1;
   \       0x28   0x619A             STR      R2,[R3, #+24]
    360                      }
    361                  }
    362                  p_tcb->TickNextPtr  = (OS_TCB        *)0;
   \                     ??OS_TickListRemove_2: (+1)
   \       0x2A   0x6144             STR      R4,[R0, #+20]
    363                  p_tcb->TickPrevPtr  = (OS_TCB        *)0;
   \       0x2C   0x6184             STR      R4,[R0, #+24]
    364                  p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
   \       0x2E   0x61C4             STR      R4,[R0, #+28]
    365                  p_tcb->TickCtrMatch = (OS_TICK        )0u;
   \       0x30   0x64C4             STR      R4,[R0, #+76]
    366                  p_spoke->NbrEntries--;
   \       0x32   0x8888             LDRH     R0,[R1, #+4]
   \       0x34   0x1E40             SUBS     R0,R0,#+1
   \       0x36   0x8088             STRH     R0,[R1, #+4]
    367              }
    368          }
   \                     ??OS_TickListRemove_0: (+1)
   \       0x38   0xBD10             POP      {R4,PC}          ;; return
    369          
    370          /*$PAGE*/
    371          /*
    372          ************************************************************************************************************************
    373          *                                              RESET TICK LIST PEAK DETECTOR
    374          *
    375          * Description: This function is used to reset the peak detector for the number of entries in each spoke.
    376          *
    377          * Arguments  : void
    378          *
    379          * Returns    : none
    380          *
    381          * Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
    382          ************************************************************************************************************************
    383          */
    384          
    385          

   \                                 In section .text, align 2, keep-with-next
    386          void  OS_TickListResetPeak (void)
    387          {
   \                     OS_TickListResetPeak: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    388              OS_TICK_SPOKE_IX   i;
    389              OS_TICK_SPOKE     *p_spoke;
    390          
    391          
    392          
    393              for (i = 0u; i < OSCfg_TickWheelSize; i++) {
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x0001             MOVS     R1,R0
   \        0x6   0xE007             B        ??OS_TickListResetPeak_0
    394                  p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
   \                     ??OS_TickListResetPeak_1: (+1)
   \        0x8   0x....             LDR      R2,??DataTable4_14
   \        0xA   0x000B             MOVS     R3,R1
   \        0xC   0xB29B             UXTH     R3,R3
   \        0xE   0x2408             MOVS     R4,#+8
   \       0x10   0x435C             MULS     R4,R3,R4
   \       0x12   0x1912             ADDS     R2,R2,R4
    395                  p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
   \       0x14   0x80D0             STRH     R0,[R2, #+6]
    396              }
   \       0x16   0x1C49             ADDS     R1,R1,#+1
   \                     ??OS_TickListResetPeak_0: (+1)
   \       0x18   0x000A             MOVS     R2,R1
   \       0x1A   0x....             LDR      R3,??DataTable5
   \       0x1C   0x881B             LDRH     R3,[R3, #+0]
   \       0x1E   0xB292             UXTH     R2,R2
   \       0x20   0x429A             CMP      R2,R3
   \       0x22   0xD3F1             BCC      ??OS_TickListResetPeak_1
    397          }
   \       0x24   0xBD10             POP      {R4,PC}          ;; return
    398          
    399          /*$PAGE*/
    400          /*
    401          ************************************************************************************************************************
    402          *                                                UPDATE THE TICK LIST
    403          *
    404          * Description: This function is called when a tick occurs and determines if the timeout waiting for a kernel object has
    405          *              expired or a delay has expired.
    406          *
    407          * Arguments  : non
    408          *
    409          * Returns    : none
    410          *
    411          * Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
    412          ************************************************************************************************************************
    413          */
    414          

   \                                 In section .text, align 2, keep-with-next
    415          void  OS_TickListUpdate (void)
    416          {
   \                     OS_TickListUpdate: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
    417              CPU_BOOLEAN        done;
    418              OS_TICK_SPOKE     *p_spoke;
    419              OS_TCB            *p_tcb;
    420              OS_TCB            *p_tcb_next;
    421              OS_TICK_SPOKE_IX   spoke;
    422              CPU_TS             ts_start;
    423              CPU_TS             ts_end;
    424              CPU_SR_ALLOC();
   \        0x2   0x2400             MOVS     R4,#+0
   \        0x4   0x0020             MOVS     R0,R4
    425          
    426          
    427              OS_CRITICAL_ENTER();
   \        0x6   0x....'....        BL       CPU_SR_Save
   \        0xA   0x....             LDR      R1,??DataTable5_1
   \        0xC   0x7809             LDRB     R1,[R1, #+0]
   \        0xE   0x1C49             ADDS     R1,R1,#+1
   \       0x10   0x....             LDR      R2,??DataTable5_1
   \       0x12   0x7011             STRB     R1,[R2, #+0]
   \       0x14   0x....'....        BL       CPU_SR_Restore
    428              ts_start = OS_TS_GET();
   \       0x18   0x9400             STR      R4,[SP, #+0]
    429              OSTickCtr++;                                                       /* Keep track of the number of ticks           */
   \       0x1A   0x....             LDR      R7,??DataTable5_2
   \       0x1C   0x6838             LDR      R0,[R7, #+0]
   \       0x1E   0x1C40             ADDS     R0,R0,#+1
   \       0x20   0x6038             STR      R0,[R7, #+0]
    430              spoke    = (OS_TICK_SPOKE_IX)(OSTickCtr % OSCfg_TickWheelSize);
   \       0x22   0x6838             LDR      R0,[R7, #+0]
   \       0x24   0x....             LDR      R1,??DataTable5
   \       0x26   0x8809             LDRH     R1,[R1, #+0]
   \       0x28   0x....'....        BL       __aeabi_uidivmod
    431              p_spoke  = &OSCfg_TickWheel[spoke];
   \       0x2C   0x....             LDR      R0,??DataTable5_3
   \       0x2E   0xB289             UXTH     R1,R1
   \       0x30   0x2208             MOVS     R2,#+8
   \       0x32   0x434A             MULS     R2,R1,R2
   \       0x34   0x1880             ADDS     R0,R0,R2
    432              p_tcb    = p_spoke->FirstPtr;
   \       0x36   0x6805             LDR      R5,[R0, #+0]
    433              done     = DEF_FALSE;
   \       0x38   0x0026             MOVS     R6,R4
   \       0x3A   0xE000             B        ??OS_TickListUpdate_0
    434              while (done == DEF_FALSE) {
    435                  if (p_tcb != (OS_TCB *)0) {
    436                      p_tcb_next = p_tcb->TickNextPtr;                           /* Point to next TCB to update                 */
    437                      switch (p_tcb->TaskState) {
    438                          case OS_TASK_STATE_RDY:
    439                          case OS_TASK_STATE_PEND:
    440                          case OS_TASK_STATE_SUSPENDED:
    441                          case OS_TASK_STATE_PEND_SUSPENDED:
    442                               break;
    443          
    444                          case OS_TASK_STATE_DLY:
    445                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    446                                                 - OSTickCtr;
    447                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    448                                   p_tcb->TaskState = OS_TASK_STATE_RDY;
    449                                   OS_TaskRdy(p_tcb);                            /* Make task ready to run                      */
    450                               } else {
    451                                   done             = DEF_TRUE;                  /* Don't find a match, we're done!             */
    452                               }
    453                               break;
    454          
    455                          case OS_TASK_STATE_PEND_TIMEOUT:
    456                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    457                                                 - OSTickCtr;
    458                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    459          #if (OS_MSG_EN > 0u)
    460                                   p_tcb->MsgPtr     = (void      *)0;
    461                                   p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
    462          #endif
    463                                   p_tcb->TS         = OS_TS_GET();
    464                                   OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
    465                                   OS_TaskRdy(p_tcb);
    466                                   p_tcb->TaskState  = OS_TASK_STATE_RDY;
    467                                   p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
    468                                   p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
    469                               } else {
    470                                   done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
    471                               }
    472                               break;
    473          
    474                          case OS_TASK_STATE_DLY_SUSPENDED:
    475                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    476                                                 - OSTickCtr;
    477                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    478                                   p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
    479                                   OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
    480                               } else {
    481                                   done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
    482                               }
    483                               break;
    484          
    485                          case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
    486                               p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
    487                                                 - OSTickCtr;
    488                               if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
    489          #if (OS_MSG_EN > 0u)
    490                                   p_tcb->MsgPtr     = (void      *)0;
    491                                   p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
    492          #endif
    493                                   p_tcb->TS         = OS_TS_GET();
    494                                   OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
    495                                   OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
    496                                   p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
    497                                   p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
    498                                   p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
    499                               } else {
    500                                   done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
    501                               }
    502                               break;
    503          
    504                          default:
    505                               break;
    506                      }
    507                      p_tcb = p_tcb_next;
   \                     ??OS_TickListUpdate_1: (+1)
   \                     ??OS_TickListUpdate_2: (+1)
   \       0x3C   0x9D01             LDR      R5,[SP, #+4]
   \                     ??OS_TickListUpdate_0: (+1)
   \       0x3E   0x0030             MOVS     R0,R6
   \       0x40   0xB2C0             UXTB     R0,R0
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD176             BNE      ??OS_TickListUpdate_3
   \       0x46   0x2D00             CMP      R5,#+0
   \       0x48   0xD072             BEQ      ??OS_TickListUpdate_4
   \       0x4A   0x6968             LDR      R0,[R5, #+20]
   \       0x4C   0x9001             STR      R0,[SP, #+4]
   \       0x4E   0x2036             MOVS     R0,#+54
   \       0x50   0x5C28             LDRB     R0,[R5, R0]
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD00B             BEQ      ??OS_TickListUpdate_5
   \       0x56   0x2802             CMP      R0,#+2
   \       0x58   0xD009             BEQ      ??OS_TickListUpdate_5
   \       0x5A   0xD309             BCC      ??OS_TickListUpdate_6
   \       0x5C   0x2804             CMP      R0,#+4
   \       0x5E   0xD006             BEQ      ??OS_TickListUpdate_5
   \       0x60   0xD317             BCC      ??OS_TickListUpdate_7
   \       0x62   0x2806             CMP      R0,#+6
   \       0x64   0xD003             BEQ      ??OS_TickListUpdate_5
   \       0x66   0xD333             BCC      ??OS_TickListUpdate_8
   \       0x68   0x2807             CMP      R0,#+7
   \       0x6A   0xD042             BEQ      ??OS_TickListUpdate_9
   \       0x6C   0xE7E6             B        ??OS_TickListUpdate_1
   \                     ??OS_TickListUpdate_5: (+1)
   \       0x6E   0xE7E5             B        ??OS_TickListUpdate_2
   \                     ??OS_TickListUpdate_6: (+1)
   \       0x70   0x6CE8             LDR      R0,[R5, #+76]
   \       0x72   0x6839             LDR      R1,[R7, #+0]
   \       0x74   0x1A40             SUBS     R0,R0,R1
   \       0x76   0x6528             STR      R0,[R5, #+80]
   \       0x78   0x6838             LDR      R0,[R7, #+0]
   \       0x7A   0x6CE9             LDR      R1,[R5, #+76]
   \       0x7C   0x4288             CMP      R0,R1
   \       0x7E   0xD106             BNE      ??OS_TickListUpdate_10
   \       0x80   0x0020             MOVS     R0,R4
   \       0x82   0x2136             MOVS     R1,#+54
   \       0x84   0x5468             STRB     R0,[R5, R1]
   \       0x86   0x0028             MOVS     R0,R5
   \       0x88   0x....'....        BL       OS_TaskRdy
   \       0x8C   0xE000             B        ??OS_TickListUpdate_11
   \                     ??OS_TickListUpdate_10: (+1)
   \       0x8E   0x2601             MOVS     R6,#+1
   \                     ??OS_TickListUpdate_11: (+1)
   \       0x90   0xE7D4             B        ??OS_TickListUpdate_2
   \                     ??OS_TickListUpdate_7: (+1)
   \       0x92   0x6CE8             LDR      R0,[R5, #+76]
   \       0x94   0x6839             LDR      R1,[R7, #+0]
   \       0x96   0x1A40             SUBS     R0,R0,R1
   \       0x98   0x6528             STR      R0,[R5, #+80]
   \       0x9A   0x6838             LDR      R0,[R7, #+0]
   \       0x9C   0x6CE9             LDR      R1,[R5, #+76]
   \       0x9E   0x4288             CMP      R0,R1
   \       0xA0   0xD114             BNE      ??OS_TickListUpdate_12
   \       0xA2   0x65EC             STR      R4,[R5, #+92]
   \       0xA4   0x0020             MOVS     R0,R4
   \       0xA6   0x2160             MOVS     R1,#+96
   \       0xA8   0x5268             STRH     R0,[R5, R1]
   \       0xAA   0x642C             STR      R4,[R5, #+64]
   \       0xAC   0x0028             MOVS     R0,R5
   \       0xAE   0x....'....        BL       OS_PendListRemove
   \       0xB2   0x0028             MOVS     R0,R5
   \       0xB4   0x....'....        BL       OS_TaskRdy
   \       0xB8   0x0020             MOVS     R0,R4
   \       0xBA   0x2136             MOVS     R1,#+54
   \       0xBC   0x5468             STRB     R0,[R5, R1]
   \       0xBE   0x2003             MOVS     R0,#+3
   \       0xC0   0x2135             MOVS     R1,#+53
   \       0xC2   0x5468             STRB     R0,[R5, R1]
   \       0xC4   0x0020             MOVS     R0,R4
   \       0xC6   0x2134             MOVS     R1,#+52
   \       0xC8   0x5468             STRB     R0,[R5, R1]
   \       0xCA   0xE000             B        ??OS_TickListUpdate_13
   \                     ??OS_TickListUpdate_12: (+1)
   \       0xCC   0x2601             MOVS     R6,#+1
   \                     ??OS_TickListUpdate_13: (+1)
   \       0xCE   0xE7B5             B        ??OS_TickListUpdate_2
   \                     ??OS_TickListUpdate_8: (+1)
   \       0xD0   0x6CE8             LDR      R0,[R5, #+76]
   \       0xD2   0x6839             LDR      R1,[R7, #+0]
   \       0xD4   0x1A40             SUBS     R0,R0,R1
   \       0xD6   0x6528             STR      R0,[R5, #+80]
   \       0xD8   0x6838             LDR      R0,[R7, #+0]
   \       0xDA   0x6CE9             LDR      R1,[R5, #+76]
   \       0xDC   0x4288             CMP      R0,R1
   \       0xDE   0xD106             BNE      ??OS_TickListUpdate_14
   \       0xE0   0x2004             MOVS     R0,#+4
   \       0xE2   0x2136             MOVS     R1,#+54
   \       0xE4   0x5468             STRB     R0,[R5, R1]
   \       0xE6   0x0028             MOVS     R0,R5
   \       0xE8   0x....'....        BL       OS_TickListRemove
   \       0xEC   0xE000             B        ??OS_TickListUpdate_15
   \                     ??OS_TickListUpdate_14: (+1)
   \       0xEE   0x2601             MOVS     R6,#+1
   \                     ??OS_TickListUpdate_15: (+1)
   \       0xF0   0xE7A4             B        ??OS_TickListUpdate_2
   \                     ??OS_TickListUpdate_9: (+1)
   \       0xF2   0x6CE8             LDR      R0,[R5, #+76]
   \       0xF4   0x6839             LDR      R1,[R7, #+0]
   \       0xF6   0x1A40             SUBS     R0,R0,R1
   \       0xF8   0x6528             STR      R0,[R5, #+80]
   \       0xFA   0x6838             LDR      R0,[R7, #+0]
   \       0xFC   0x6CE9             LDR      R1,[R5, #+76]
   \       0xFE   0x4288             CMP      R0,R1
   \      0x100   0xD114             BNE      ??OS_TickListUpdate_16
   \      0x102   0x65EC             STR      R4,[R5, #+92]
   \      0x104   0x0020             MOVS     R0,R4
   \      0x106   0x2160             MOVS     R1,#+96
   \      0x108   0x5268             STRH     R0,[R5, R1]
   \      0x10A   0x642C             STR      R4,[R5, #+64]
   \      0x10C   0x0028             MOVS     R0,R5
   \      0x10E   0x....'....        BL       OS_PendListRemove
   \      0x112   0x0028             MOVS     R0,R5
   \      0x114   0x....'....        BL       OS_TickListRemove
   \      0x118   0x2004             MOVS     R0,#+4
   \      0x11A   0x2136             MOVS     R1,#+54
   \      0x11C   0x5468             STRB     R0,[R5, R1]
   \      0x11E   0x2003             MOVS     R0,#+3
   \      0x120   0x2135             MOVS     R1,#+53
   \      0x122   0x5468             STRB     R0,[R5, R1]
   \      0x124   0x0020             MOVS     R0,R4
   \      0x126   0x2134             MOVS     R1,#+52
   \      0x128   0x5468             STRB     R0,[R5, R1]
   \      0x12A   0xE000             B        ??OS_TickListUpdate_17
   \                     ??OS_TickListUpdate_16: (+1)
   \      0x12C   0x2601             MOVS     R6,#+1
   \                     ??OS_TickListUpdate_17: (+1)
   \      0x12E   0xE785             B        ??OS_TickListUpdate_2
    508                  } else {
    509                      done  = DEF_TRUE;
   \                     ??OS_TickListUpdate_4: (+1)
   \      0x130   0x2601             MOVS     R6,#+1
   \      0x132   0xE784             B        ??OS_TickListUpdate_0
    510                  }
    511              }
    512              ts_end = OS_TS_GET() - ts_start;                                   /* Measure execution time of tick task         */
   \                     ??OS_TickListUpdate_3: (+1)
   \      0x134   0x9900             LDR      R1,[SP, #+0]
   \      0x136   0x4248             RSBS     R0,R1,#+0
    513              if (OSTickTaskTimeMax < ts_end) {
   \      0x138   0x....             LDR      R1,??DataTable5_4
   \      0x13A   0x680A             LDR      R2,[R1, #+0]
   \      0x13C   0x4282             CMP      R2,R0
   \      0x13E   0xD200             BCS      ??OS_TickListUpdate_18
    514                  OSTickTaskTimeMax = ts_end;
   \      0x140   0x6008             STR      R0,[R1, #+0]
    515              }
    516              OS_CRITICAL_EXIT();
   \                     ??OS_TickListUpdate_18: (+1)
   \      0x142   0x....'....        BL       CPU_SR_Save
   \      0x146   0x....             LDR      R1,??DataTable5_1
   \      0x148   0x780A             LDRB     R2,[R1, #+0]
   \      0x14A   0x1E52             SUBS     R2,R2,#+1
   \      0x14C   0x700A             STRB     R2,[R1, #+0]
   \      0x14E   0x7809             LDRB     R1,[R1, #+0]
   \      0x150   0x2900             CMP      R1,#+0
   \      0x152   0xD10B             BNE      ??OS_TickListUpdate_19
   \      0x154   0x....             LDR      R1,??DataTable5_5
   \      0x156   0x8809             LDRH     R1,[R1, #+0]
   \      0x158   0x2900             CMP      R1,#+0
   \      0x15A   0xD004             BEQ      ??OS_TickListUpdate_20
   \      0x15C   0x....'....        BL       CPU_SR_Restore
   \      0x160   0x....'....        BL       OS_Sched0
   \      0x164   0xE004             B        ??OS_TickListUpdate_21
   \                     ??OS_TickListUpdate_20: (+1)
   \      0x166   0x....'....        BL       CPU_SR_Restore
   \      0x16A   0xE001             B        ??OS_TickListUpdate_21
   \                     ??OS_TickListUpdate_19: (+1)
   \      0x16C   0x....'....        BL       CPU_SR_Restore
    517          }
   \                     ??OS_TickListUpdate_21: (+1)
   \      0x170   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x....'....        DC32     OSRunning

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x....'....        DC32     OSTickCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x....'....        DC32     OSTickTaskTimeMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     OSCfg_TickTaskStkBasePtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x0000'7212        DC32     0x7212

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x....'....        DC32     OSCfg_TickTaskStkSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x....'....        DC32     OSCfg_StkSizeMin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x0000'7213        DC32     0x7213

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0x....'....        DC32     OSCfg_TickTaskPrio

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \        0x0   0x0000'7211        DC32     0x7211

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \        0x0   0x....'....        DC32     OSCfg_TickTaskStkLimit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \        0x0   0x....'....        DC32     OS_TickTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \        0x0   0x....'....        DC32     OSTickTaskTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \        0x0   0x....'....        DC32     OSCfg_TickWheel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \        0x0   0x....'....        DC32     OSCfg_TickWheelSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \        0x0   0xFFFF'0001        DC32     0xffff0001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \        0x0   0x0000'727E        DC32     0x727e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x....'....        DC32     OSCfg_TickWheelSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x....'....        DC32     OSSchedLockNestingCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x....'....        DC32     OSTickCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x....'....        DC32     OSCfg_TickWheel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \        0x0   0x....'....        DC32     OSTickTaskTimeMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \        0x0   0x....'....        DC32     OSIntQNbrEntries

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x75 0x43          DC8 "uC/OS-III Tick Task"

   \              0x2F 0x4F    

   \              0x53 0x2D    

   \              0x49 0x49    

   \              0x49 0x20    

   \              0x54 0x69    

   \              0x63 0x6B    

   \              0x20 0x54    

   \              0x61 0x73    

   \              0x6B 0x00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   OS_TickListInit
      12   OS_TickListInsert
        12 __aeabi_uidivmod
       8   OS_TickListRemove
       8   OS_TickListResetPeak
      32   OS_TickListUpdate
        32   -> CPU_SR_Restore
        32   -> CPU_SR_Save
        32   -> OS_PendListRemove
        32   -> OS_Sched0
        32   -> OS_TaskRdy
        32   -> OS_TickListRemove
        32 __aeabi_uidivmod
      16   OS_TickTask
        16   -> OSTaskSemPend
        16   -> OS_TickListUpdate
      48   OS_TickTaskInit
        48   -> OSTaskCreate
        48   -> OS_TickListInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
      20  ?_0
      46  OS_TickListInit
     268  OS_TickListInsert
      58  OS_TickListRemove
      38  OS_TickListResetPeak
     370  OS_TickListUpdate
      36  OS_TickTask
     118  OS_TickTaskInit

 
    20 bytes in section .rodata
 1'030 bytes in section .text
 
 1'030 bytes of CODE  memory
    20 bytes of CONST memory

Errors: none
Warnings: none
