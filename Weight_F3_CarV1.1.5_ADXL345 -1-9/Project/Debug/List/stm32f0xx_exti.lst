###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.4.261/W32 for ARM         10/Jan/2021  16:10:24
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Source\FWLib\src\stm32f0xx_exti.c
#    Command line      =
#        -f C:\Users\macanlin\AppData\Local\Temp\EWF94F.tmp
#        ("C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Source\FWLib\src\stm32f0xx_exti.c" -D USE_STDPERIPH_DRIVER -D
#        STM32F072 -lC
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\List" -o
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        C:\rj\IAR\arm\inc\c\DLib_Config_Normal.h -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\BSP\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\FWLib\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\CMSIS\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\OS_Cfg\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-CPU\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-LIB\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uCOS-III\Ports\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uCOS-III\Source\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\APP\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\FWLib\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-LIB\\" -Ol -I
#        C:\rj\IAR\arm\CMSIS\Core\Include\\ -I
#        C:\rj\IAR\arm\CMSIS\DSP\Include\\)
#    Locale            =  C
#    List file         =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\List\stm32f0xx_exti.lst
#    Object file       =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\Obj\stm32f0xx_exti.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345 -1-9\Source\FWLib\src\stm32f0xx_exti.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f0xx_exti.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    16-January-2014
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the EXTI peripheral:
      9            *           + Initialization and Configuration
     10            *           + Interrupts and flags management
     11            *
     12            *  @verbatim
     13            ==============================================================================
     14                                      ##### EXTI features ##### 
     15            ==============================================================================
     16              [..] External interrupt/event lines are mapped as following:
     17                   (#) All available GPIO pins are connected to the 16 external 
     18                       interrupt/event lines from EXTI0 to EXTI15.
     19                   (#) EXTI line 16 is connected to the PVD output, not applicable for STM32F030 devices.
     20                   (#) EXTI line 17 is connected to the RTC Alarm event.
     21                   (#) EXTI line 18 is connected to the RTC Alarm event, applicable only for STM32F072 devices.
     22                   (#) EXTI line 19 is connected to the RTC Tamper and TimeStamp events.
     23                   (#) EXTI line 20 is connected to the RTC wakeup event, applicable only for STM32F072 devices.
     24                   (#) EXTI line 21 is connected to the Comparator 1 wakeup event, applicable only for STM32F051 and STM32F072 devices. 
     25                   (#) EXTI line 22 is connected to the Comparator 2 wakeup event, applicable only for STM32F051 and STM32F072 devices.
     26                   (#) EXTI line 23 is connected to the I2C1 wakeup event, not applicable for STM32F030 devices.
     27                   (#) EXTI line 25 is connected to the USART1 wakeup event, not applicable for STM32F030 devices.
     28                   (#) EXTI line 26 is connected to the USART2 wakeup event, applicable only for STM32F072 devices.
     29                   (#) EXTI line 27 is connected to the CEC wakeup event, applicable only for STM32F051 and STM32F072 devices.
     30                   (#) EXTI line 31 is connected to the VDD USB monitor event, applicable only for STM32F072 devices.
     31          
     32                                 ##### How to use this driver ##### 
     33            ==============================================================================
     34              [..] In order to use an I/O pin as an external interrupt source, follow
     35                   steps below:
     36              (#) Configure the I/O in input mode using GPIO_Init()
     37              (#) Select the input source pin for the EXTI line using 
     38                  SYSCFG_EXTILineConfig().
     39              (#) Select the mode(interrupt, event) and configure the trigger selection 
     40                 (Rising, falling or both) using EXTI_Init(). For the internal interrupt,
     41                 the trigger selection is not needed( the active edge is always the rising one).
     42              (#) Configure NVIC IRQ channel mapped to the EXTI line using NVIC_Init().
     43              (#) Optionally, you can generate a software interrupt using the function EXTI_GenerateSWInterrupt().
     44              [..]
     45              (@) SYSCFG APB clock must be enabled to get write access to SYSCFG_EXTICRx
     46                registers using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     47              @endverbatim
     48            *
     49            ******************************************************************************
     50            * @attention
     51            *
     52            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     53            *
     54            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     55            * You may not use this file except in compliance with the License.
     56            * You may obtain a copy of the License at:
     57            *
     58            *        http://www.st.com/software_license_agreement_liberty_v2
     59            *
     60            * Unless required by applicable law or agreed to in writing, software 
     61            * distributed under the License is distributed on an "AS IS" BASIS, 
     62            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     63            * See the License for the specific language governing permissions and
     64            * limitations under the License.
     65            *
     66            ******************************************************************************
     67            */
     68          
     69          /* Includes ------------------------------------------------------------------*/
     70          #include "stm32f0xx_exti.h"
     71          
     72          /** @addtogroup STM32F0xx_StdPeriph_Driver
     73            * @{
     74            */
     75          
     76          /** @defgroup EXTI 
     77            * @brief EXTI driver modules
     78            * @{
     79            */
     80          
     81          /* Private typedef -----------------------------------------------------------*/
     82          /* Private define ------------------------------------------------------------*/
     83          #define EXTI_LINENONE     ((uint32_t)0x00000)        /* No interrupt selected */
     84          
     85          /* Private macro -------------------------------------------------------------*/
     86          /* Private variables ---------------------------------------------------------*/
     87          /* Private function prototypes -----------------------------------------------*/
     88          /* Private functions ---------------------------------------------------------*/
     89          
     90          /** @defgroup EXTI_Private_Functions
     91            * @{
     92            */
     93          
     94          /** @defgroup EXTI_Group1 Initialization and Configuration functions
     95           *  @brief   Initialization and Configuration functions 
     96           *
     97          @verbatim   
     98            ==============================================================================
     99                      ##### Initialization and Configuration functions #####
    100            ==============================================================================
    101          
    102          @endverbatim
    103            * @{
    104            */
    105          
    106          /**
    107            * @brief  Deinitializes the EXTI peripheral registers to their default reset 
    108            *         values.
    109            * @param  None
    110            * @retval None
    111            */

   \                                 In section .text, align 2, keep-with-next
    112          void EXTI_DeInit(void)
    113          {
    114            EXTI->IMR = 0x0F940000;
   \                     EXTI_DeInit: (+1)
   \        0x0   0x....             LDR      R0,??DataTable6  ;; 0xf940000
   \        0x2   0x....             LDR      R1,??DataTable6_1  ;; 0x40010400
   \        0x4   0x6008             STR      R0,[R1, #+0]
    115            EXTI->EMR = 0x00000000;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x....             LDR      R1,??DataTable6_2  ;; 0x40010404
   \        0xA   0x6008             STR      R0,[R1, #+0]
    116            EXTI->RTSR = 0x00000000;
   \        0xC   0x....             LDR      R1,??DataTable6_3  ;; 0x40010408
   \        0xE   0x6008             STR      R0,[R1, #+0]
    117            EXTI->FTSR = 0x00000000;
   \       0x10   0x....             LDR      R1,??DataTable6_4  ;; 0x4001040c
   \       0x12   0x6008             STR      R0,[R1, #+0]
    118            EXTI->PR = 0x006BFFFF;
   \       0x14   0x....             LDR      R0,??DataTable6_5  ;; 0x6bffff
   \       0x16   0x....             LDR      R1,??DataTable6_6  ;; 0x40010414
   \       0x18   0x6008             STR      R0,[R1, #+0]
    119          }
   \       0x1A   0x4770             BX       LR               ;; return
    120          
    121          /**
    122            * @brief  Initializes the EXTI peripheral according to the specified
    123            *         parameters in the EXTI_InitStruct.
    124            * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure that 
    125            *         contains the configuration information for the EXTI peripheral.
    126            * @retval None
    127            */

   \                                 In section .text, align 2, keep-with-next
    128          void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
    129          {
   \                     EXTI_Init: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
    130            uint32_t tmp = 0;
   \        0x2   0x2100             MOVS     R1,#+0
    131          
    132            /* Check the parameters */
    133            assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
    134            assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
    135            assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
    136            assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
    137          
    138            tmp = (uint32_t)EXTI_BASE;
   \        0x4   0x....             LDR      R1,??DataTable6_1  ;; 0x40010400
   \        0x6   0x000A             MOVS     R2,R1
    139          
    140            if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
   \        0x8   0x7983             LDRB     R3,[R0, #+6]
   \        0xA   0x2B00             CMP      R3,#+0
   \        0xC   0xD02C             BEQ      ??EXTI_Init_0
    141            {
    142              /* Clear EXTI line configuration */
    143              EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
   \        0xE   0x....             LDR      R3,??DataTable6_1  ;; 0x40010400
   \       0x10   0x681C             LDR      R4,[R3, #+0]
   \       0x12   0x6805             LDR      R5,[R0, #+0]
   \       0x14   0x43AC             BICS     R4,R4,R5
   \       0x16   0x601C             STR      R4,[R3, #+0]
    144              EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
   \       0x18   0x....             LDR      R3,??DataTable6_2  ;; 0x40010404
   \       0x1A   0x681C             LDR      R4,[R3, #+0]
   \       0x1C   0x6805             LDR      R5,[R0, #+0]
   \       0x1E   0x43AC             BICS     R4,R4,R5
   \       0x20   0x601C             STR      R4,[R3, #+0]
    145          
    146              tmp += EXTI_InitStruct->EXTI_Mode;
   \       0x22   0x7903             LDRB     R3,[R0, #+4]
   \       0x24   0x18D2             ADDS     R2,R2,R3
    147          
    148              *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
   \       0x26   0x6813             LDR      R3,[R2, #+0]
   \       0x28   0x6804             LDR      R4,[R0, #+0]
   \       0x2A   0x431C             ORRS     R4,R4,R3
   \       0x2C   0x6014             STR      R4,[R2, #+0]
    149          
    150              /* Clear Rising Falling edge configuration */
    151              EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
   \       0x2E   0x....             LDR      R2,??DataTable6_3  ;; 0x40010408
   \       0x30   0x6813             LDR      R3,[R2, #+0]
   \       0x32   0x6804             LDR      R4,[R0, #+0]
   \       0x34   0x43A3             BICS     R3,R3,R4
   \       0x36   0x6013             STR      R3,[R2, #+0]
    152              EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
   \       0x38   0x....             LDR      R3,??DataTable6_4  ;; 0x4001040c
   \       0x3A   0x681C             LDR      R4,[R3, #+0]
   \       0x3C   0x6805             LDR      R5,[R0, #+0]
   \       0x3E   0x43AC             BICS     R4,R4,R5
   \       0x40   0x601C             STR      R4,[R3, #+0]
    153          
    154              /* Select the trigger for the selected interrupts */
    155              if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
   \       0x42   0x7944             LDRB     R4,[R0, #+5]
   \       0x44   0x2C10             CMP      R4,#+16
   \       0x46   0xD108             BNE      ??EXTI_Init_1
    156              {
    157                /* Rising Falling edge */
    158                EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
   \       0x48   0x6811             LDR      R1,[R2, #+0]
   \       0x4A   0x6804             LDR      R4,[R0, #+0]
   \       0x4C   0x430C             ORRS     R4,R4,R1
   \       0x4E   0x6014             STR      R4,[R2, #+0]
    159                EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
   \       0x50   0x6819             LDR      R1,[R3, #+0]
   \       0x52   0x6800             LDR      R0,[R0, #+0]
   \       0x54   0x4308             ORRS     R0,R0,R1
   \       0x56   0x6018             STR      R0,[R3, #+0]
   \       0x58   0xE00C             B        ??EXTI_Init_2
    160              }
    161              else
    162              {
    163                tmp = (uint32_t)EXTI_BASE;
    164                tmp += EXTI_InitStruct->EXTI_Trigger;
   \                     ??EXTI_Init_1: (+1)
   \       0x5A   0x7942             LDRB     R2,[R0, #+5]
   \       0x5C   0x1889             ADDS     R1,R1,R2
    165          
    166                *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
   \       0x5E   0x680A             LDR      R2,[R1, #+0]
   \       0x60   0x6800             LDR      R0,[R0, #+0]
   \       0x62   0x4310             ORRS     R0,R0,R2
   \       0x64   0x6008             STR      R0,[R1, #+0]
   \       0x66   0xE005             B        ??EXTI_Init_2
    167              }
    168            }
    169            else
    170            {
    171              tmp += EXTI_InitStruct->EXTI_Mode;
   \                     ??EXTI_Init_0: (+1)
   \       0x68   0x7901             LDRB     R1,[R0, #+4]
   \       0x6A   0x1851             ADDS     R1,R2,R1
    172          
    173              /* Disable the selected external lines */
    174              *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
   \       0x6C   0x680A             LDR      R2,[R1, #+0]
   \       0x6E   0x6800             LDR      R0,[R0, #+0]
   \       0x70   0x4382             BICS     R2,R2,R0
   \       0x72   0x600A             STR      R2,[R1, #+0]
    175            }
    176          }
   \                     ??EXTI_Init_2: (+1)
   \       0x74   0xBD30             POP      {R4,R5,PC}       ;; return
    177          
    178          /**
    179            * @brief  Fills each EXTI_InitStruct member with its reset value.
    180            * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
    181            *         be initialized.
    182            * @retval None
    183            */

   \                                 In section .text, align 2, keep-with-next
    184          void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
    185          {
    186            EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
   \                     EXTI_StructInit: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6001             STR      R1,[R0, #+0]
    187            EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
   \        0x4   0x000A             MOVS     R2,R1
   \        0x6   0x7102             STRB     R2,[R0, #+4]
    188            EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
   \        0x8   0x220C             MOVS     R2,#+12
   \        0xA   0x7142             STRB     R2,[R0, #+5]
    189            EXTI_InitStruct->EXTI_LineCmd = DISABLE;
   \        0xC   0x7181             STRB     R1,[R0, #+6]
    190          }
   \        0xE   0x4770             BX       LR               ;; return
    191          
    192          /**
    193            * @brief  Generates a Software interrupt on selected EXTI line.
    194            * @param  EXTI_Line: specifies the EXTI line on which the software interrupt
    195            *         will be generated.
    196            *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
    197            * @retval None
    198            */

   \                                 In section .text, align 2, keep-with-next
    199          void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
    200          {
    201            /* Check the parameters */
    202            assert_param(IS_EXTI_LINE(EXTI_Line));
    203          
    204            EXTI->SWIER |= EXTI_Line;
   \                     EXTI_GenerateSWInterrupt: (+1)
   \        0x0   0x....             LDR      R1,??DataTable6_7  ;; 0x40010410
   \        0x2   0x680A             LDR      R2,[R1, #+0]
   \        0x4   0x4310             ORRS     R0,R0,R2
   \        0x6   0x6008             STR      R0,[R1, #+0]
    205          }
   \        0x8   0x4770             BX       LR               ;; return
    206          
    207          /**
    208            * @}
    209            */
    210          
    211          /** @defgroup EXTI_Group2 Interrupts and flags management functions
    212           *  @brief    Interrupts and flags management functions 
    213           *
    214          @verbatim   
    215            ==============================================================================
    216                       ##### Interrupts and flags management functions #####
    217            ==============================================================================
    218            
    219          @endverbatim
    220            * @{
    221            */
    222          
    223          /**
    224            * @brief  Checks whether the specified EXTI line flag is set or not.
    225            * @param  EXTI_Line: specifies the EXTI line flag to check.
    226            *          This parameter can be EXTI_Linex where x can be (0..27).
    227            * @retval The new state of EXTI_Line (SET or RESET).
    228            */

   \                                 In section .text, align 2, keep-with-next
    229          FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
    230          {
   \                     EXTI_GetFlagStatus: (+1)
   \        0x0   0xB500             PUSH     {LR}
   \        0x2   0x0001             MOVS     R1,R0
    231             FlagStatus bitstatus = RESET;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x0002             MOVS     R2,R0
    232            /* Check the parameters */
    233            assert_param(IS_GET_EXTI_LINE(EXTI_Line));
    234          
    235            if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
   \        0x8   0x....             LDR      R2,??DataTable6_6  ;; 0x40010414
   \        0xA   0x6812             LDR      R2,[R2, #+0]
   \        0xC   0x4011             ANDS     R1,R1,R2
   \        0xE   0x2900             CMP      R1,#+0
   \       0x10   0xD001             BEQ      ??EXTI_GetFlagStatus_0
    236            {
    237              bitstatus = SET;
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE7FF             B        ??EXTI_GetFlagStatus_1
    238            }
    239            else
    240            {
    241              bitstatus = RESET;
    242            }
    243            return bitstatus;
   \                     ??EXTI_GetFlagStatus_0: (+1)
   \                     ??EXTI_GetFlagStatus_1: (+1)
   \       0x16   0xB2C0             UXTB     R0,R0
   \       0x18   0xBD00             POP      {PC}             ;; return
    244          }
    245          
    246          /**
    247            * @brief  Clears the EXTI's line pending flags.
    248            * @param  EXTI_Line: specifies the EXTI lines flags to clear.
    249            *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
    250            * @retval None
    251            */

   \                                 In section .text, align 2, keep-with-next
    252          void EXTI_ClearFlag(uint32_t EXTI_Line)
    253          {
    254            /* Check the parameters */
    255            assert_param(IS_EXTI_LINE(EXTI_Line));
    256          
    257            EXTI->PR = EXTI_Line;
   \                     EXTI_ClearFlag: (+1)
   \        0x0   0x....             LDR      R1,??DataTable6_6  ;; 0x40010414
   \        0x2   0x6008             STR      R0,[R1, #+0]
    258          }
   \        0x4   0x4770             BX       LR               ;; return
    259          
    260          /**
    261            * @brief  Checks whether the specified EXTI line is asserted or not.
    262            * @param  EXTI_Line: specifies the EXTI line to check.
    263            *          This parameter can be EXTI_Linex where x can be (0..27).
    264            * @retval The new state of EXTI_Line (SET or RESET).
    265            */

   \                                 In section .text, align 2, keep-with-next
    266          ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
    267          {
   \                     EXTI_GetITStatus: (+1)
   \        0x0   0xB500             PUSH     {LR}
   \        0x2   0x0001             MOVS     R1,R0
    268            ITStatus bitstatus = RESET;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x0002             MOVS     R2,R0
    269          
    270            /* Check the parameters */
    271            assert_param(IS_GET_EXTI_LINE(EXTI_Line));
    272          
    273            if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
   \        0x8   0x....             LDR      R2,??DataTable6_6  ;; 0x40010414
   \        0xA   0x6812             LDR      R2,[R2, #+0]
   \        0xC   0x4011             ANDS     R1,R1,R2
   \        0xE   0x2900             CMP      R1,#+0
   \       0x10   0xD001             BEQ      ??EXTI_GetITStatus_0
    274            {
    275              bitstatus = SET;
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0xE7FF             B        ??EXTI_GetITStatus_1
    276            }
    277            else
    278            {
    279              bitstatus = RESET;
    280            }
    281            return bitstatus;
   \                     ??EXTI_GetITStatus_0: (+1)
   \                     ??EXTI_GetITStatus_1: (+1)
   \       0x16   0xB2C0             UXTB     R0,R0
   \       0x18   0xBD00             POP      {PC}             ;; return
    282          }
    283          
    284          /**
    285            * @brief  Clears the EXTI's line pending bits.
    286            * @param  EXTI_Line: specifies the EXTI lines to clear.
    287            *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
    288            * @retval None
    289            */

   \                                 In section .text, align 2, keep-with-next
    290          void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
    291          {
    292            /* Check the parameters */
    293            assert_param(IS_EXTI_LINE(EXTI_Line));
    294          
    295            EXTI->PR = EXTI_Line;
   \                     EXTI_ClearITPendingBit: (+1)
   \        0x0   0x....             LDR      R1,??DataTable6_6  ;; 0x40010414
   \        0x2   0x6008             STR      R0,[R1, #+0]
    296          }
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x0F94'0000        DC32     0xf940000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x4001'0400        DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x4001'0404        DC32     0x40010404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x4001'0408        DC32     0x40010408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x4001'040C        DC32     0x4001040c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0x006B'FFFF        DC32     0x6bffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \        0x0   0x4001'0414        DC32     0x40010414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \        0x0   0x4001'0410        DC32     0x40010410
    297          
    298          /**
    299            * @}
    300            */
    301          
    302          /**
    303            * @}
    304            */
    305          
    306          /**
    307            * @}
    308            */
    309          
    310          /**
    311            * @}
    312            */
    313          
    314          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   EXTI_ClearFlag
       0   EXTI_ClearITPendingBit
       0   EXTI_DeInit
       0   EXTI_GenerateSWInterrupt
       4   EXTI_GetFlagStatus
       4   EXTI_GetITStatus
      12   EXTI_Init
       0   EXTI_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       6  EXTI_ClearFlag
       6  EXTI_ClearITPendingBit
      28  EXTI_DeInit
      10  EXTI_GenerateSWInterrupt
      26  EXTI_GetFlagStatus
      26  EXTI_GetITStatus
     118  EXTI_Init
      16  EXTI_StructInit

 
 268 bytes in section .text
 
 268 bytes of CODE memory

Errors: none
Warnings: none
