###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.4.261/W32 for ARM         10/Jan/2021  16:10:26
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Source\FWLib\src\stm32f0xx_misc.c
#    Command line      =
#        -f C:\Users\macanlin\AppData\Local\Temp\EWFCCF.tmp
#        ("C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Source\FWLib\src\stm32f0xx_misc.c" -D USE_STDPERIPH_DRIVER -D
#        STM32F072 -lC
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\List" -o
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        C:\rj\IAR\arm\inc\c\DLib_Config_Normal.h -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\BSP\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\FWLib\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\CMSIS\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\OS_Cfg\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-CPU\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-LIB\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uCOS-III\Ports\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uCOS-III\Source\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\APP\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\FWLib\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-LIB\\" -Ol -I
#        C:\rj\IAR\arm\CMSIS\Core\Include\\ -I
#        C:\rj\IAR\arm\CMSIS\DSP\Include\\)
#    Locale            =  C
#    List file         =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\List\stm32f0xx_misc.lst
#    Object file       =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\Obj\stm32f0xx_misc.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345 -1-9\Source\FWLib\src\stm32f0xx_misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f0xx_misc.c
      4            * @author  MCD Application Team
      5            * @version V1.3.0
      6            * @date    16-January-2014
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     13            *
     14            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     15            * You may not use this file except in compliance with the License.
     16            * You may obtain a copy of the License at:
     17            *
     18            *        http://www.st.com/software_license_agreement_liberty_v2
     19            *
     20            * Unless required by applicable law or agreed to in writing, software 
     21            * distributed under the License is distributed on an "AS IS" BASIS, 
     22            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     23            * See the License for the specific language governing permissions and
     24            * limitations under the License.
     25            *
     26            ******************************************************************************
     27            */
     28          
     29          /* Includes ------------------------------------------------------------------*/
     30          #include "stm32f0xx_misc.h"
     31          
     32          /** @addtogroup STM32F0xx_StdPeriph_Driver
     33            * @{
     34            */
     35          
     36          /** @defgroup MISC 
     37            * @brief MISC driver modules
     38            * @{
     39            */
     40          
     41          /* Private typedef -----------------------------------------------------------*/
     42          /* Private define ------------------------------------------------------------*/
     43          /* Private macro -------------------------------------------------------------*/
     44          /* Private variables ---------------------------------------------------------*/
     45          /* Private function prototypes -----------------------------------------------*/
     46          /* Private functions ---------------------------------------------------------*/
     47          
     48          /** @defgroup MISC_Private_Functions
     49            * @{
     50            */
     51          /**
     52            *
     53          @verbatim
     54           *******************************************************************************
     55                             ##### Interrupts configuration functions #####
     56           *******************************************************************************
     57              [..] This section provide functions allowing to configure the NVIC interrupts
     58                  (IRQ). The Cortex-M0 exceptions are managed by CMSIS functions.
     59                   (#) Enable and Configure the priority of the selected IRQ Channels. 
     60                       The priority can be 0..3. 
     61          
     62                  -@- Lower priority values gives higher priority.
     63                  -@- Priority Order:
     64                      (#@) Lowest priority.
     65                      (#@) Lowest hardware priority (IRQn position).  
     66            
     67          @endverbatim
     68          */
     69          
     70          /**
     71            * @brief  Initializes the NVIC peripheral according to the specified
     72            *         parameters in the NVIC_InitStruct.
     73            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
     74            *         the configuration information for the specified NVIC peripheral.
     75            * @retval None
     76            */

   \                                 In section .text, align 2, keep-with-next
     77          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
     78          {
   \                     NVIC_Init: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
     79            uint32_t tmppriority = 0x00;
   \        0x2   0x2100             MOVS     R1,#+0
     80            
     81            /* Check the parameters */
     82            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
     83            assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
     84              
     85            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
   \        0x4   0x7881             LDRB     R1,[R0, #+2]
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD023             BEQ      ??NVIC_Init_0
     86            {
     87              /* Compute the Corresponding IRQ Priority --------------------------------*/    
     88              tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
   \        0xA   0x....             LDR      R1,??DataTable2  ;; 0xe000e400
   \        0xC   0x7802             LDRB     R2,[R0, #+0]
   \        0xE   0x1092             ASRS     R2,R2,#+2
   \       0x10   0x2304             MOVS     R3,#+4
   \       0x12   0x435A             MULS     R2,R3,R2
   \       0x14   0x588B             LDR      R3,[R1, R2]
     89              tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
   \       0x16   0x2203             MOVS     R2,#+3
   \       0x18   0x24FF             MOVS     R4,#+255
   \       0x1A   0x7805             LDRB     R5,[R0, #+0]
   \       0x1C   0x4015             ANDS     R5,R5,R2
   \       0x1E   0x2608             MOVS     R6,#+8
   \       0x20   0x4375             MULS     R5,R6,R5
   \       0x22   0x40AC             LSLS     R4,R4,R5
   \       0x24   0x43A3             BICS     R3,R3,R4
     90              tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
   \       0x26   0x7844             LDRB     R4,[R0, #+1]
   \       0x28   0x01A4             LSLS     R4,R4,#+6
   \       0x2A   0xB2E4             UXTB     R4,R4
   \       0x2C   0x7805             LDRB     R5,[R0, #+0]
   \       0x2E   0x402A             ANDS     R2,R2,R5
   \       0x30   0x2508             MOVS     R5,#+8
   \       0x32   0x436A             MULS     R2,R5,R2
   \       0x34   0x4094             LSLS     R4,R4,R2
   \       0x36   0x431C             ORRS     R4,R4,R3
     91              
     92              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
   \       0x38   0x7802             LDRB     R2,[R0, #+0]
   \       0x3A   0x1092             ASRS     R2,R2,#+2
   \       0x3C   0x2304             MOVS     R3,#+4
   \       0x3E   0x435A             MULS     R2,R3,R2
   \       0x40   0x508C             STR      R4,[R1, R2]
     93              
     94              /* Enable the Selected IRQ Channels --------------------------------------*/
     95              NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \       0x42   0x2101             MOVS     R1,#+1
   \       0x44   0x7800             LDRB     R0,[R0, #+0]
   \       0x46   0x06C0             LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \       0x48   0x0EC0             LSRS     R0,R0,#+27
   \       0x4A   0x4081             LSLS     R1,R1,R0
   \       0x4C   0x....             LDR      R0,??DataTable2_1  ;; 0xe000e100
   \       0x4E   0x6001             STR      R1,[R0, #+0]
   \       0x50   0xE006             B        ??NVIC_Init_1
     96            }
     97            else
     98            {
     99              /* Disable the Selected IRQ Channels -------------------------------------*/
    100              NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \                     ??NVIC_Init_0: (+1)
   \       0x52   0x2101             MOVS     R1,#+1
   \       0x54   0x7800             LDRB     R0,[R0, #+0]
   \       0x56   0x06C0             LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \       0x58   0x0EC0             LSRS     R0,R0,#+27
   \       0x5A   0x4081             LSLS     R1,R1,R0
   \       0x5C   0x....             LDR      R0,??DataTable2_2  ;; 0xe000e180
   \       0x5E   0x6001             STR      R1,[R0, #+0]
    101            }
    102          }
   \                     ??NVIC_Init_1: (+1)
   \       0x60   0xBD70             POP      {R4-R6,PC}       ;; return
    103          
    104          /**
    105            * @brief  Selects the condition for the system to enter low power mode.
    106            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    107            *          This parameter can be one of the following values:
    108            *            @arg NVIC_LP_SEVONPEND: Low Power SEV on Pend.
    109            *            @arg NVIC_LP_SLEEPDEEP: Low Power DEEPSLEEP request.
    110            *            @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
    111            * @param  NewState: new state of LP condition. 
    112            *          This parameter can be: ENABLE or DISABLE.
    113            * @retval None
    114            */

   \                                 In section .text, align 2, keep-with-next
    115          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    116          {
   \                     NVIC_SystemLPConfig: (+1)
   \        0x0   0xB500             PUSH     {LR}
    117            /* Check the parameters */
    118            assert_param(IS_NVIC_LP(LowPowerMode));
    119            
    120            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    121            
    122            if (NewState != DISABLE)
   \        0x2   0xB2C9             UXTB     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD005             BEQ      ??NVIC_SystemLPConfig_0
    123            {
    124              SCB->SCR |= LowPowerMode;
   \        0x8   0x....             LDR      R1,??DataTable2_3  ;; 0xe000ed10
   \        0xA   0x680A             LDR      R2,[R1, #+0]
   \        0xC   0xB2C0             UXTB     R0,R0
   \        0xE   0x4310             ORRS     R0,R0,R2
   \       0x10   0x6008             STR      R0,[R1, #+0]
   \       0x12   0xE004             B        ??NVIC_SystemLPConfig_1
    125            }
    126            else
    127            {
    128              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
   \                     ??NVIC_SystemLPConfig_0: (+1)
   \       0x14   0x....             LDR      R1,??DataTable2_3  ;; 0xe000ed10
   \       0x16   0x680A             LDR      R2,[R1, #+0]
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0x4382             BICS     R2,R2,R0
   \       0x1C   0x600A             STR      R2,[R1, #+0]
    129            }
    130          }
   \                     ??NVIC_SystemLPConfig_1: (+1)
   \       0x1E   0xBD00             POP      {PC}             ;; return
    131          
    132          /**
    133            * @brief  Configures the SysTick clock source.
    134            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    135            *          This parameter can be one of the following values:
    136            *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    137            *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    138            * @retval None
    139            */

   \                                 In section .text, align 2, keep-with-next
    140          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    141          {
   \                     SysTick_CLKSourceConfig: (+1)
   \        0x0   0xB500             PUSH     {LR}
    142            /* Check the parameters */
    143            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
    144            
    145            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
   \        0x2   0x2804             CMP      R0,#+4
   \        0x4   0xD105             BNE      ??SysTick_CLKSourceConfig_0
    146            {
    147              SysTick->CTRL |= SysTick_CLKSource_HCLK;
   \        0x6   0x....             LDR      R0,??DataTable2_4  ;; 0xe000e010
   \        0x8   0x6801             LDR      R1,[R0, #+0]
   \        0xA   0x2204             MOVS     R2,#+4
   \        0xC   0x430A             ORRS     R2,R2,R1
   \        0xE   0x6002             STR      R2,[R0, #+0]
   \       0x10   0xE004             B        ??SysTick_CLKSourceConfig_1
    148            }
    149            else
    150            {
    151              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
   \                     ??SysTick_CLKSourceConfig_0: (+1)
   \       0x12   0x....             LDR      R0,??DataTable2_4  ;; 0xe000e010
   \       0x14   0x6801             LDR      R1,[R0, #+0]
   \       0x16   0x2204             MOVS     R2,#+4
   \       0x18   0x4391             BICS     R1,R1,R2
   \       0x1A   0x6001             STR      R1,[R0, #+0]
    152            }
    153          }
   \                     ??SysTick_CLKSourceConfig_1: (+1)
   \       0x1C   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0xE000'E400        DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0xE000'ED10        DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0xE000'E010        DC32     0xe000e010
    154          
    155          /**
    156            * @}
    157            */
    158          
    159          /**
    160            * @}
    161            */
    162          
    163          /**
    164            * @}
    165            */
    166          
    167          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   NVIC_Init
       4   NVIC_SystemLPConfig
       4   SysTick_CLKSourceConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
      98  NVIC_Init
      32  NVIC_SystemLPConfig
      30  SysTick_CLKSourceConfig

 
 180 bytes in section .text
 
 180 bytes of CODE memory

Errors: none
Warnings: none
