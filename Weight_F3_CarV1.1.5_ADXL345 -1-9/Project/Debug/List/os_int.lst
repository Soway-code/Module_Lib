###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.4.261/W32 for ARM         10/Jan/2021  16:10:20
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Source\System\uCOS-III\Source\os_int.c
#    Command line      =
#        -f C:\Users\macanlin\AppData\Local\Temp\EWE570.tmp
#        ("C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Source\System\uCOS-III\Source\os_int.c" -D USE_STDPERIPH_DRIVER
#        -D STM32F072 -lC
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\List" -o
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        C:\rj\IAR\arm\inc\c\DLib_Config_Normal.h -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\BSP\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\FWLib\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\CMSIS\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\OS_Cfg\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-CPU\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-LIB\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uCOS-III\Ports\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uCOS-III\Source\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\APP\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\FWLib\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-LIB\\" -Ol -I
#        C:\rj\IAR\arm\CMSIS\Core\Include\\ -I
#        C:\rj\IAR\arm\CMSIS\DSP\Include\\)
#    Locale            =  C
#    List file         =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\List\os_int.lst
#    Object file       =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\Obj\os_int.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#
###############################################################################

C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345 -1-9\Source\System\uCOS-III\Source\os_int.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2012; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                                 ISR QUEUE MANAGEMENT
     10          *
     11          * File    : OS_INT.C
     12          * By      : JJL
     13          * Version : V3.03.01
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
     20          *           application/product.   We provide ALL the source code for your convenience and to help you 
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
     30          ************************************************************************************************************************
     31          */
     32          
     33          #define   MICRIUM_SOURCE
     34          #include  <os.h>
     35          
     36          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     37          const  CPU_CHAR  *os_int__c = "$Id: $";
     38          #endif
     39          
     40          
     41          #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
     42          /*$PAGE*/
     43          /*
     44          ************************************************************************************************************************
     45          *                                                   POST TO ISR QUEUE
     46          *
     47          * Description: This function places contents of posts into an intermediate queue to help defer processing of interrupts
     48          *              at the task level.
     49          *
     50          * Arguments  : type       is the type of kernel object the post is destined to:
     51          *
     52          *                             OS_OBJ_TYPE_SEM
     53          *                             OS_OBJ_TYPE_Q
     54          *                             OS_OBJ_TYPE_FLAG
     55          *                             OS_OBJ_TYPE_TASK_MSG
     56          *                             OS_OBJ_TYPE_TASK_SIGNAL
     57          *
     58          *              p_obj      is a pointer to the kernel object to post to.  This can be a pointer to a semaphore,
     59          *              -----      a message queue or a task control clock.
     60          *
     61          *              p_void     is a pointer to a message that is being posted.  This is used when posting to a message
     62          *                         queue or directly to a task.
     63          *
     64          *              msg_size   is the size of the message being posted
     65          *
     66          *              flags      if the post is done to an event flag group then this corresponds to the flags being
     67          *                         posted
     68          *
     69          *              ts         is a timestamp as to when the post was done
     70          *
     71          *              opt        this corresponds to post options and applies to:
     72          *
     73          *                             OSFlagPost()
     74          *                             OSSemPost()
     75          *                             OSQPost()
     76          *                             OSTaskQPost()
     77          *
     78          *              p_err      is a pointer to a variable that will contain an error code returned by this function.
     79          *
     80          *                             OS_ERR_NONE         if the post to the ISR queue was successful
     81          *                             OS_ERR_INT_Q_FULL   if the ISR queue is full and cannot accepts any further posts.  This
     82          *                                                 generally indicates that you are receiving interrupts faster than you
     83          *                                                 can process them or, that you didn't make the ISR queue large enough.
     84          *
     85          * Returns    : none
     86          *
     87          * Note(s)    : none
     88          ************************************************************************************************************************
     89          */
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void  OS_IntQPost (OS_OBJ_TYPE   type,
     92                             void         *p_obj,
     93                             void         *p_void,
     94                             OS_MSG_SIZE   msg_size,
     95                             OS_FLAGS      flags,
     96                             OS_OPT        opt,
     97                             CPU_TS        ts,
     98                             OS_ERR       *p_err)
     99          {
   \                     OS_IntQPost: (+1)
   \        0x0   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \        0x2   0xB082             SUB      SP,SP,#+8
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x001F             MOVS     R7,R3
   \        0x8   0x9D0D             LDR      R5,[SP, #+52]
    100              CPU_SR_ALLOC();
   \        0xA   0x2600             MOVS     R6,#+0
   \        0xC   0x0030             MOVS     R0,R6
    101          
    102          
    103          
    104          #ifdef OS_SAFETY_CRITICAL
    105              if (p_err == (OS_ERR *)0) {
    106                  OS_SAFETY_CRITICAL_EXCEPTION();
    107                  return;
    108              }
    109          #endif
    110          
    111              CPU_CRITICAL_ENTER();
   \        0xE   0x....'....        BL       CPU_SR_Save
   \       0x12   0x9001             STR      R0,[SP, #+4]
    112              if (OSIntQNbrEntries < OSCfg_IntQSize) {                /* Make sure we haven't already filled the ISR queue      */
   \       0x14   0x....             LDR      R0,??DataTable2
   \       0x16   0x8801             LDRH     R1,[R0, #+0]
   \       0x18   0x....             LDR      R2,??DataTable2_1
   \       0x1A   0x8812             LDRH     R2,[R2, #+0]
   \       0x1C   0x4291             CMP      R1,R2
   \       0x1E   0xD236             BCS      ??OS_IntQPost_0
    113                  OSIntQNbrEntries++;
   \       0x20   0x8801             LDRH     R1,[R0, #+0]
   \       0x22   0x1C49             ADDS     R1,R1,#+1
   \       0x24   0x8001             STRH     R1,[R0, #+0]
    114          
    115                  if (OSIntQNbrEntriesMax < OSIntQNbrEntries) {
   \       0x26   0x....             LDR      R1,??DataTable2_2
   \       0x28   0x880A             LDRH     R2,[R1, #+0]
   \       0x2A   0x8803             LDRH     R3,[R0, #+0]
   \       0x2C   0x429A             CMP      R2,R3
   \       0x2E   0xD201             BCS      ??OS_IntQPost_1
    116                      OSIntQNbrEntriesMax = OSIntQNbrEntries;
   \       0x30   0x8800             LDRH     R0,[R0, #+0]
   \       0x32   0x8008             STRH     R0,[R1, #+0]
   \                     ??OS_IntQPost_1: (+1)
   \       0x34   0x980C             LDR      R0,[SP, #+48]
   \       0x36   0x990B             LDR      R1,[SP, #+44]
   \       0x38   0x9A0A             LDR      R2,[SP, #+40]
   \       0x3A   0x466B             MOV      R3,SP
   \       0x3C   0x801F             STRH     R7,[R3, #+0]
    117                  }
    118          
    119                  OSIntQInPtr->Type       = type;                     /* Save object type being posted                          */
   \       0x3E   0x....             LDR      R3,??DataTable2_3
   \       0x40   0x681F             LDR      R7,[R3, #+0]
   \       0x42   0x603C             STR      R4,[R7, #+0]
    120                  OSIntQInPtr->ObjPtr     = p_obj;                    /* Save pointer to object being posted                    */
   \       0x44   0x9C03             LDR      R4,[SP, #+12]
   \       0x46   0x681F             LDR      R7,[R3, #+0]
   \       0x48   0x60BC             STR      R4,[R7, #+8]
    121                  OSIntQInPtr->MsgPtr     = p_void;                   /* Save pointer to message if posting to a message queue  */
   \       0x4A   0x9C04             LDR      R4,[SP, #+16]
   \       0x4C   0x681F             LDR      R7,[R3, #+0]
   \       0x4E   0x60FC             STR      R4,[R7, #+12]
    122                  OSIntQInPtr->MsgSize    = msg_size;                 /* Save the message size   if posting to a message queue  */
   \       0x50   0x466C             MOV      R4,SP
   \       0x52   0x8824             LDRH     R4,[R4, #+0]
   \       0x54   0x681F             LDR      R7,[R3, #+0]
   \       0x56   0x823C             STRH     R4,[R7, #+16]
    123                  OSIntQInPtr->Flags      = flags;                    /* Save the flags if posting to an event flag group       */
   \       0x58   0x681C             LDR      R4,[R3, #+0]
   \       0x5A   0x6162             STR      R2,[R4, #+20]
    124                  OSIntQInPtr->Opt        = opt;                      /* Save post options                                      */
   \       0x5C   0x681A             LDR      R2,[R3, #+0]
   \       0x5E   0x8311             STRH     R1,[R2, #+24]
    125                  OSIntQInPtr->TS         = ts;                       /* Save time stamp                                        */
   \       0x60   0x6819             LDR      R1,[R3, #+0]
   \       0x62   0x61C8             STR      R0,[R1, #+28]
    126          
    127                  OSIntQInPtr             =  OSIntQInPtr->NextPtr;    /* Point to the next interrupt handler queue entry        */
   \       0x64   0x6818             LDR      R0,[R3, #+0]
   \       0x66   0x6840             LDR      R0,[R0, #+4]
   \       0x68   0x6018             STR      R0,[R3, #+0]
    128          
    129                  OSRdyList[0].NbrEntries = (OS_OBJ_QTY)1;            /* Make the interrupt handler task ready to run           */
   \       0x6A   0x....             LDR      R0,??DataTable2_4
   \       0x6C   0x2101             MOVS     R1,#+1
   \       0x6E   0x8101             STRH     R1,[R0, #+8]
    130                  OSRdyList[0].HeadPtr    = &OSIntQTaskTCB;
   \       0x70   0x....             LDR      R1,??DataTable2_5
   \       0x72   0x6001             STR      R1,[R0, #+0]
    131                  OSRdyList[0].TailPtr    = &OSIntQTaskTCB;
   \       0x74   0x6041             STR      R1,[R0, #+4]
    132                  OS_PrioInsert(0u);                                  /* Add task priority 0 in the priority table              */
   \       0x76   0x2000             MOVS     R0,#+0
   \       0x78   0x....'....        BL       OS_PrioInsert
    133                  if (OSPrioCur != 0) {                               /* Chk if OSIntQTask is not running                       */
   \       0x7C   0x....             LDR      R0,??DataTable2_6
   \       0x7E   0x7801             LDRB     R1,[R0, #+0]
   \       0x80   0x2900             CMP      R1,#+0
   \       0x82   0xD002             BEQ      ??OS_IntQPost_2
    134                      OSPrioSaved         = OSPrioCur;                /* Save current priority                                  */
   \       0x84   0x7800             LDRB     R0,[R0, #+0]
   \       0x86   0x....             LDR      R1,??DataTable2_7
   \       0x88   0x7008             STRB     R0,[R1, #+0]
    135                  }
    136          
    137                 *p_err                   = OS_ERR_NONE;
   \                     ??OS_IntQPost_2: (+1)
   \       0x8A   0x802E             STRH     R6,[R5, #+0]
   \       0x8C   0xE005             B        ??OS_IntQPost_3
    138              } else {
    139                  OSIntQOvfCtr++;                                     /* Count the number of ISR queue overflows                */
   \                     ??OS_IntQPost_0: (+1)
   \       0x8E   0x....             LDR      R0,??DataTable2_8
   \       0x90   0x8801             LDRH     R1,[R0, #+0]
   \       0x92   0x1C49             ADDS     R1,R1,#+1
   \       0x94   0x8001             STRH     R1,[R0, #+0]
    140                 *p_err                   = OS_ERR_INT_Q_FULL;
   \       0x96   0x....             LDR      R0,??DataTable3  ;; 0x4653
   \       0x98   0x8028             STRH     R0,[R5, #+0]
    141              }
    142              CPU_CRITICAL_EXIT();
   \                     ??OS_IntQPost_3: (+1)
   \       0x9A   0x9801             LDR      R0,[SP, #+4]
   \       0x9C   0x....'....        BL       CPU_SR_Restore
    143          }
   \       0xA0   0xB005             ADD      SP,SP,#+20
   \       0xA2   0xBDF0             POP      {R4-R7,PC}       ;; return
    144          
    145          /*$PAGE*/
    146          /*
    147          ************************************************************************************************************************
    148          *                                               INTERRUPT QUEUE MANAGEMENT TASK
    149          *
    150          * Description: This task is created by OS_IntQTaskInit().
    151          *
    152          * Arguments  : p_arg     is a pointer to an optional argument that is passed during task creation.  For this function
    153          *                        the argument is not used and will be a NULL pointer.
    154          *
    155          * Returns    : none
    156          ************************************************************************************************************************
    157          */
    158          

   \                                 In section .text, align 2, keep-with-next
    159          void  OS_IntQRePost (void)
    160          {
   \                     OS_IntQRePost: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
    161          //    CPU_TS  ts;
    162              OS_ERR  err;
    163          
    164          
    165              switch (OSIntQOutPtr->Type) {                           /* Re-post to task                                        */
   \        0x2   0x....             LDR      R4,??DataTable2_9
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0x....             LDR      R1,??DataTable2_10  ;; 0x414d4553
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xD032             BEQ      ??OS_IntQRePost_0
   \        0xE   0x....             LDR      R1,??DataTable3_1  ;; 0x47414c46
   \       0x10   0x4288             CMP      R0,R1
   \       0x12   0xD012             BEQ      ??OS_IntQRePost_1
   \       0x14   0x....             LDR      R1,??DataTable3_2  ;; 0x47495354
   \       0x16   0x4288             CMP      R0,R1
   \       0x18   0xD04C             BEQ      ??OS_IntQRePost_2
   \       0x1A   0x....             LDR      R1,??DataTable3_3  ;; 0x47534d54
   \       0x1C   0x4288             CMP      R0,R1
   \       0x1E   0xD033             BEQ      ??OS_IntQRePost_3
   \       0x20   0x....             LDR      R1,??DataTable3_4  ;; 0x4b434954
   \       0x22   0x4288             CMP      R0,R1
   \       0x24   0xD056             BEQ      ??OS_IntQRePost_4
   \       0x26   0x....             LDR      R1,??DataTable3_5  ;; 0x53455254
   \       0x28   0x4288             CMP      R0,R1
   \       0x2A   0xD03D             BEQ      ??OS_IntQRePost_5
   \       0x2C   0x....             LDR      R1,??DataTable3_6  ;; 0x53555354
   \       0x2E   0x4288             CMP      R0,R1
   \       0x30   0xD04A             BEQ      ??OS_IntQRePost_6
   \       0x32   0x....             LDR      R1,??DataTable3_7  ;; 0x55455551
   \       0x34   0x4288             CMP      R0,R1
   \       0x36   0xD00D             BEQ      ??OS_IntQRePost_7
   \       0x38   0xE05C             B        ??OS_IntQRePost_8
    166                  case OS_OBJ_TYPE_FLAG:
    167          #if OS_CFG_FLAG_EN > 0u
    168                       (void)OS_FlagPost((OS_FLAG_GRP *) OSIntQOutPtr->ObjPtr,
    169                                         (OS_FLAGS     ) OSIntQOutPtr->Flags,
    170                                         (OS_OPT       ) OSIntQOutPtr->Opt,
    171                                         (CPU_TS       ) OSIntQOutPtr->TS,
    172                                         (OS_ERR      *)&err);
   \                     ??OS_IntQRePost_1: (+1)
   \       0x3A   0xA802             ADD      R0,SP,#+8
   \       0x3C   0x9000             STR      R0,[SP, #+0]
   \       0x3E   0x6820             LDR      R0,[R4, #+0]
   \       0x40   0x69C3             LDR      R3,[R0, #+28]
   \       0x42   0x6820             LDR      R0,[R4, #+0]
   \       0x44   0x8B02             LDRH     R2,[R0, #+24]
   \       0x46   0x6820             LDR      R0,[R4, #+0]
   \       0x48   0x6941             LDR      R1,[R0, #+20]
   \       0x4A   0x6820             LDR      R0,[R4, #+0]
   \       0x4C   0x6880             LDR      R0,[R0, #+8]
   \       0x4E   0x....'....        BL       OS_FlagPost
    173          #endif
    174                       break;
   \       0x52   0xE04F             B        ??OS_IntQRePost_9
    175          
    176                  case OS_OBJ_TYPE_Q:
    177          #if OS_CFG_Q_EN > 0u
    178                       OS_QPost((OS_Q      *) OSIntQOutPtr->ObjPtr,
    179                                (void      *) OSIntQOutPtr->MsgPtr,
    180                                (OS_MSG_SIZE) OSIntQOutPtr->MsgSize,
    181                                (OS_OPT     ) OSIntQOutPtr->Opt,
    182                                (CPU_TS     ) OSIntQOutPtr->TS,
    183                                (OS_ERR    *)&err);
   \                     ??OS_IntQRePost_7: (+1)
   \       0x54   0xA802             ADD      R0,SP,#+8
   \       0x56   0x9001             STR      R0,[SP, #+4]
   \       0x58   0x6820             LDR      R0,[R4, #+0]
   \       0x5A   0x69C0             LDR      R0,[R0, #+28]
   \       0x5C   0x9000             STR      R0,[SP, #+0]
   \       0x5E   0x6820             LDR      R0,[R4, #+0]
   \       0x60   0x8B03             LDRH     R3,[R0, #+24]
   \       0x62   0x6820             LDR      R0,[R4, #+0]
   \       0x64   0x8A02             LDRH     R2,[R0, #+16]
   \       0x66   0x6820             LDR      R0,[R4, #+0]
   \       0x68   0x68C1             LDR      R1,[R0, #+12]
   \       0x6A   0x6820             LDR      R0,[R4, #+0]
   \       0x6C   0x6880             LDR      R0,[R0, #+8]
   \       0x6E   0x....'....        BL       OS_QPost
    184          #endif
    185                       break;
   \       0x72   0xE03F             B        ??OS_IntQRePost_9
    186          
    187                  case OS_OBJ_TYPE_SEM:
    188          #if OS_CFG_SEM_EN > 0u
    189                       (void)OS_SemPost((OS_SEM *) OSIntQOutPtr->ObjPtr,
    190                                        (OS_OPT  ) OSIntQOutPtr->Opt,
    191                                        (CPU_TS  ) OSIntQOutPtr->TS,
    192                                        (OS_ERR *)&err);
   \                     ??OS_IntQRePost_0: (+1)
   \       0x74   0xAB02             ADD      R3,SP,#+8
   \       0x76   0x6820             LDR      R0,[R4, #+0]
   \       0x78   0x69C2             LDR      R2,[R0, #+28]
   \       0x7A   0x6820             LDR      R0,[R4, #+0]
   \       0x7C   0x8B01             LDRH     R1,[R0, #+24]
   \       0x7E   0x6820             LDR      R0,[R4, #+0]
   \       0x80   0x6880             LDR      R0,[R0, #+8]
   \       0x82   0x....'....        BL       OS_SemPost
    193          #endif
    194                       break;
   \       0x86   0xE035             B        ??OS_IntQRePost_9
    195          
    196                  case OS_OBJ_TYPE_TASK_MSG:
    197          #if OS_CFG_TASK_Q_EN > 0u
    198                       OS_TaskQPost((OS_TCB    *) OSIntQOutPtr->ObjPtr,
    199                                    (void      *) OSIntQOutPtr->MsgPtr,
    200                                    (OS_MSG_SIZE) OSIntQOutPtr->MsgSize,
    201                                    (OS_OPT     ) OSIntQOutPtr->Opt,
    202                                    (CPU_TS     ) OSIntQOutPtr->TS,
    203                                    (OS_ERR    *)&err);
   \                     ??OS_IntQRePost_3: (+1)
   \       0x88   0xA802             ADD      R0,SP,#+8
   \       0x8A   0x9001             STR      R0,[SP, #+4]
   \       0x8C   0x6820             LDR      R0,[R4, #+0]
   \       0x8E   0x69C0             LDR      R0,[R0, #+28]
   \       0x90   0x9000             STR      R0,[SP, #+0]
   \       0x92   0x6820             LDR      R0,[R4, #+0]
   \       0x94   0x8B03             LDRH     R3,[R0, #+24]
   \       0x96   0x6820             LDR      R0,[R4, #+0]
   \       0x98   0x8A02             LDRH     R2,[R0, #+16]
   \       0x9A   0x6820             LDR      R0,[R4, #+0]
   \       0x9C   0x68C1             LDR      R1,[R0, #+12]
   \       0x9E   0x6820             LDR      R0,[R4, #+0]
   \       0xA0   0x6880             LDR      R0,[R0, #+8]
   \       0xA2   0x....'....        BL       OS_TaskQPost
    204          #endif
    205                       break;
   \       0xA6   0xE025             B        ??OS_IntQRePost_9
    206          
    207                  case OS_OBJ_TYPE_TASK_RESUME:
    208          #if OS_CFG_TASK_SUSPEND_EN > 0u
    209                       (void)OS_TaskResume((OS_TCB *) OSIntQOutPtr->ObjPtr,
    210                                           (OS_ERR *)&err);
   \                     ??OS_IntQRePost_5: (+1)
   \       0xA8   0xA902             ADD      R1,SP,#+8
   \       0xAA   0x6820             LDR      R0,[R4, #+0]
   \       0xAC   0x6880             LDR      R0,[R0, #+8]
   \       0xAE   0x....'....        BL       OS_TaskResume
    211          #endif
    212                       break;
   \       0xB2   0xE01F             B        ??OS_IntQRePost_9
    213          
    214                  case OS_OBJ_TYPE_TASK_SIGNAL:
    215                       (void)OS_TaskSemPost((OS_TCB *) OSIntQOutPtr->ObjPtr,
    216                                            (OS_OPT  ) OSIntQOutPtr->Opt,
    217                                            (CPU_TS  ) OSIntQOutPtr->TS,
    218                                            (OS_ERR *)&err);
   \                     ??OS_IntQRePost_2: (+1)
   \       0xB4   0xAB02             ADD      R3,SP,#+8
   \       0xB6   0x6820             LDR      R0,[R4, #+0]
   \       0xB8   0x69C2             LDR      R2,[R0, #+28]
   \       0xBA   0x6820             LDR      R0,[R4, #+0]
   \       0xBC   0x8B01             LDRH     R1,[R0, #+24]
   \       0xBE   0x6820             LDR      R0,[R4, #+0]
   \       0xC0   0x6880             LDR      R0,[R0, #+8]
   \       0xC2   0x....'....        BL       OS_TaskSemPost
    219                       break;
   \       0xC6   0xE015             B        ??OS_IntQRePost_9
    220          
    221                  case OS_OBJ_TYPE_TASK_SUSPEND:
    222          #if OS_CFG_TASK_SUSPEND_EN > 0u
    223                       (void)OS_TaskSuspend((OS_TCB *) OSIntQOutPtr->ObjPtr,
    224                                            (OS_ERR *)&err);
   \                     ??OS_IntQRePost_6: (+1)
   \       0xC8   0xA902             ADD      R1,SP,#+8
   \       0xCA   0x6820             LDR      R0,[R4, #+0]
   \       0xCC   0x6880             LDR      R0,[R0, #+8]
   \       0xCE   0x....'....        BL       OS_TaskSuspend
    225          #endif
    226                       break;
   \       0xD2   0xE00F             B        ??OS_IntQRePost_9
    227          
    228                  case OS_OBJ_TYPE_TICK:
    229          #if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    230                       OS_SchedRoundRobin(&OSRdyList[OSPrioSaved]);
   \                     ??OS_IntQRePost_4: (+1)
   \       0xD4   0x....             LDR      R0,??DataTable2_4
   \       0xD6   0x....             LDR      R1,??DataTable2_7
   \       0xD8   0x7809             LDRB     R1,[R1, #+0]
   \       0xDA   0x220C             MOVS     R2,#+12
   \       0xDC   0x4351             MULS     R1,R2,R1
   \       0xDE   0x1840             ADDS     R0,R0,R1
   \       0xE0   0x....'....        BL       OS_SchedRoundRobin
    231          #endif
    232          
    233                       (void)OS_TaskSemPost((OS_TCB *)&OSTickTaskTCB,                /* Signal tick task                        */
    234                                            (OS_OPT  ) OS_OPT_POST_NONE,
    235                                            (CPU_TS  ) OSIntQOutPtr->TS,
    236                                            (OS_ERR *)&err);
   \       0xE4   0xAB02             ADD      R3,SP,#+8
   \       0xE6   0x6820             LDR      R0,[R4, #+0]
   \       0xE8   0x69C2             LDR      R2,[R0, #+28]
   \       0xEA   0x2100             MOVS     R1,#+0
   \       0xEC   0x....             LDR      R0,??DataTable3_8
   \       0xEE   0x....'....        BL       OS_TaskSemPost
    237          #if OS_CFG_TMR_EN > 0u
    238                       OSTmrUpdateCtr--;
    239                       if (OSTmrUpdateCtr == (OS_CTR)0u) {
    240                           OSTmrUpdateCtr = OSTmrUpdateCnt;
    241                           ts             = OS_TS_GET();                             /* Get timestamp                           */
    242                           (void)OS_TaskSemPost((OS_TCB *)&OSTmrTaskTCB,             /* Signal timer task                       */
    243                                                (OS_OPT  ) OS_OPT_POST_NONE,
    244                                                (CPU_TS  ) ts,
    245                                                (OS_ERR *)&err);
    246                       }
    247          #endif
    248                       break;
   \       0xF2   0xE7FF             B        ??OS_IntQRePost_9
    249          
    250                  default:
    251                       break;
    252              }
    253          }
   \                     ??OS_IntQRePost_8: (+1)
   \                     ??OS_IntQRePost_9: (+1)
   \       0xF4   0xBD1F             POP      {R0-R4,PC}       ;; return
    254          
    255          /*$PAGE*/
    256          /*
    257          ************************************************************************************************************************
    258          *                                               INTERRUPT QUEUE MANAGEMENT TASK
    259          *
    260          * Description: This task is created by OS_IntQTaskInit().
    261          *
    262          * Arguments  : p_arg     is a pointer to an optional argument that is passed during task creation.  For this function
    263          *                        the argument is not used and will be a NULL pointer.
    264          *
    265          * Returns    : none
    266          ************************************************************************************************************************
    267          */
    268          

   \                                 In section .text, align 2, keep-with-next
    269          void  OS_IntQTask (void  *p_arg)
    270          {
   \                     OS_IntQTask: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    271              CPU_BOOLEAN  done;
    272              CPU_TS       ts_start;
    273              CPU_TS       ts_end;
    274              CPU_SR_ALLOC();
   \        0x2   0x2700             MOVS     R7,#+0
   \        0x4   0x0039             MOVS     R1,R7
    275          
    276          
    277          
    278              p_arg = p_arg;                                          /* Not using 'p_arg', prevent compiler warning            */
    279              while (DEF_ON) {
    280                  done = DEF_FALSE;
   \                     ??OS_IntQTask_0: (+1)
   \        0x6   0x003C             MOVS     R4,R7
   \        0x8   0xE00D             B        ??OS_IntQTask_1
    281                  while (done == DEF_FALSE) {
    282                      CPU_CRITICAL_ENTER();
    283                      if (OSIntQNbrEntries == (OS_OBJ_QTY)0u) {
    284                          OSRdyList[0].NbrEntries = (OS_OBJ_QTY)0u;   /* Remove from ready list                                 */
   \                     ??OS_IntQTask_2: (+1)
   \        0xA   0x....             LDR      R0,??DataTable2_4
   \        0xC   0x0039             MOVS     R1,R7
   \        0xE   0x8101             STRH     R1,[R0, #+8]
    285                          OSRdyList[0].HeadPtr    = (OS_TCB   *)0;
   \       0x10   0x6007             STR      R7,[R0, #+0]
    286                          OSRdyList[0].TailPtr    = (OS_TCB   *)0;
   \       0x12   0x6047             STR      R7,[R0, #+4]
    287                          OS_PrioRemove(0u);                          /* Remove from the priority table                         */
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x....'....        BL       OS_PrioRemove
    288                          CPU_CRITICAL_EXIT();
   \       0x1A   0x0028             MOVS     R0,R5
   \       0x1C   0x....'....        BL       CPU_SR_Restore
    289                          OSSched();
   \       0x20   0x....'....        BL       OSSched
    290                          done = DEF_TRUE;                            /* No more entries in the queue, we are done              */
   \       0x24   0x2401             MOVS     R4,#+1
    291                      } else {
   \                     ??OS_IntQTask_1: (+1)
   \       0x26   0x0020             MOVS     R0,R4
   \       0x28   0xB2C0             UXTB     R0,R0
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD1EB             BNE      ??OS_IntQTask_0
   \       0x2E   0x....'....        BL       CPU_SR_Save
   \       0x32   0x0005             MOVS     R5,R0
   \       0x34   0x....             LDR      R6,??DataTable2
   \       0x36   0x8830             LDRH     R0,[R6, #+0]
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD0E6             BEQ      ??OS_IntQTask_2
    292                          CPU_CRITICAL_EXIT();
   \       0x3C   0x0028             MOVS     R0,R5
   \       0x3E   0x....'....        BL       CPU_SR_Restore
    293                          ts_start = OS_TS_GET();
   \       0x42   0x003D             MOVS     R5,R7
    294                          OS_IntQRePost();
   \       0x44   0x....'....        BL       OS_IntQRePost
    295                          ts_end   = OS_TS_GET() - ts_start;          /* Measure execution time of tick task                    */
   \       0x48   0x4268             RSBS     R0,R5,#+0
    296                          if (OSIntQTaskTimeMax < ts_end) {
   \       0x4A   0x....             LDR      R1,??DataTable3_9
   \       0x4C   0x680A             LDR      R2,[R1, #+0]
   \       0x4E   0x4282             CMP      R2,R0
   \       0x50   0xD200             BCS      ??OS_IntQTask_3
    297                              OSIntQTaskTimeMax = ts_end;
   \       0x52   0x6008             STR      R0,[R1, #+0]
    298                          }
    299                          CPU_CRITICAL_ENTER();
   \                     ??OS_IntQTask_3: (+1)
   \       0x54   0x....'....        BL       CPU_SR_Save
    300                          OSIntQOutPtr = OSIntQOutPtr->NextPtr;       /* Point to next item in the ISR queue                    */
   \       0x58   0x....             LDR      R1,??DataTable3_10
   \       0x5A   0x680A             LDR      R2,[R1, #+0]
   \       0x5C   0x6852             LDR      R2,[R2, #+4]
   \       0x5E   0x600A             STR      R2,[R1, #+0]
    301                          OSIntQNbrEntries--;
   \       0x60   0x8831             LDRH     R1,[R6, #+0]
   \       0x62   0x1E49             SUBS     R1,R1,#+1
   \       0x64   0x8031             STRH     R1,[R6, #+0]
    302                          CPU_CRITICAL_EXIT();
   \       0x66   0x....'....        BL       CPU_SR_Restore
   \       0x6A   0xE7DC             B        ??OS_IntQTask_1
    303                      }
    304                  }
    305              }
    306          }
    307          
    308          /*$PAGE*/
    309          /*
    310          ************************************************************************************************************************
    311          *                                                 INITIALIZE THE ISR QUEUE
    312          *
    313          * Description: This function is called by OSInit() to initialize the ISR queue.
    314          *
    315          * Arguments  : p_err    is a pointer to a variable that will contain an error code returned by this function.
    316          *
    317          *                           OS_ERR_INT_Q             If you didn't provide an ISR queue in OS_CFG.C
    318          *                           OS_ERR_INT_Q_SIZE        If you didn't specify a large enough ISR queue.
    319          *                           OS_ERR_STK_INVALID       If you specified a NULL pointer for the task of the ISR task
    320          *                                                    handler
    321          *                           OS_ERR_STK_SIZE_INVALID  If you didn't specify a stack size greater than the minimum
    322          *                                                    specified by OS_CFG_STK_SIZE_MIN
    323          *                           OS_ERR_???               An error code returned by OSTaskCreate().
    324          *
    325          * Returns    : none
    326          *
    327          * Note(s)    : none
    328          ************************************************************************************************************************
    329          */
    330          

   \                                 In section .text, align 2, keep-with-next
    331          void  OS_IntQTaskInit (OS_ERR  *p_err)
    332          {
   \                     OS_IntQTaskInit: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB089             SUB      SP,SP,#+36
    333              OS_INT_Q      *p_int_q;
    334              OS_INT_Q      *p_int_q_next;
    335              OS_OBJ_QTY     i;
    336          
    337          
    338          
    339          #ifdef OS_SAFETY_CRITICAL
    340              if (p_err == (OS_ERR *)0) {
    341                  OS_SAFETY_CRITICAL_EXCEPTION();
    342                  return;
    343              }
    344          #endif
    345          
    346              OSIntQOvfCtr = (OS_QTY)0u;                              /* Clear the ISR queue overflow counter                   */
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x000A             MOVS     R2,R1
   \        0x8   0x....             LDR      R3,??DataTable3_11
   \        0xA   0x801A             STRH     R2,[R3, #+0]
    347          
    348              if (OSCfg_IntQBasePtr == (OS_INT_Q *)0) {
   \        0xC   0x....             LDR      R3,??DataTable3_12
   \        0xE   0x681A             LDR      R2,[R3, #+0]
   \       0x10   0x2A00             CMP      R2,#+0
   \       0x12   0xD102             BNE      ??OS_IntQTaskInit_0
    349                 *p_err = OS_ERR_INT_Q;
   \       0x14   0x....             LDR      R1,??DataTable3_13  ;; 0x4652
   \       0x16   0x8001             STRH     R1,[R0, #+0]
    350                  return;
   \       0x18   0xE054             B        ??OS_IntQTaskInit_1
    351              }
    352          
    353              if (OSCfg_IntQSize < (OS_OBJ_QTY)2u) {
   \                     ??OS_IntQTaskInit_0: (+1)
   \       0x1A   0x....             LDR      R2,??DataTable3_14
   \       0x1C   0x8812             LDRH     R2,[R2, #+0]
   \       0x1E   0x2A02             CMP      R2,#+2
   \       0x20   0xDA02             BGE      ??OS_IntQTaskInit_2
    354                 *p_err = OS_ERR_INT_Q_SIZE;
   \       0x22   0x....             LDR      R1,??DataTable3_15  ;; 0x4654
   \       0x24   0x8001             STRH     R1,[R0, #+0]
    355                  return;
   \       0x26   0xE04D             B        ??OS_IntQTaskInit_1
    356              }
    357          
    358              OSIntQTaskTimeMax = (CPU_TS)0;
   \                     ??OS_IntQTaskInit_2: (+1)
   \       0x28   0x....             LDR      R2,??DataTable3_9
   \       0x2A   0x6011             STR      R1,[R2, #+0]
    359          
    360              p_int_q           = OSCfg_IntQBasePtr;                  /* Initialize the circular ISR queue                      */
   \       0x2C   0x681A             LDR      R2,[R3, #+0]
    361              p_int_q_next      = p_int_q;
   \       0x2E   0x0014             MOVS     R4,R2
    362              p_int_q_next++;
   \       0x30   0x3420             ADDS     R4,R4,#+32
    363              for (i = 0u; i < OSCfg_IntQSize; i++) {
   \       0x32   0x000D             MOVS     R5,R1
   \       0x34   0xE00C             B        ??OS_IntQTaskInit_3
    364                  p_int_q->Type    =  OS_OBJ_TYPE_NONE;
   \                     ??OS_IntQTaskInit_4: (+1)
   \       0x36   0x....             LDR      R6,??DataTable3_16  ;; 0x454e4f4e
   \       0x38   0x6016             STR      R6,[R2, #+0]
    365                  p_int_q->ObjPtr  = (void      *)0;
   \       0x3A   0x6091             STR      R1,[R2, #+8]
    366                  p_int_q->MsgPtr  = (void      *)0;
   \       0x3C   0x60D1             STR      R1,[R2, #+12]
    367                  p_int_q->MsgSize = (OS_MSG_SIZE)0u;
   \       0x3E   0x000E             MOVS     R6,R1
   \       0x40   0x8216             STRH     R6,[R2, #+16]
    368                  p_int_q->Flags   = (OS_FLAGS   )0u;
   \       0x42   0x6151             STR      R1,[R2, #+20]
    369                  p_int_q->Opt     = (OS_OPT     )0u;
   \       0x44   0x000E             MOVS     R6,R1
   \       0x46   0x8316             STRH     R6,[R2, #+24]
    370                  p_int_q->NextPtr = p_int_q_next;
   \       0x48   0x6054             STR      R4,[R2, #+4]
    371                  p_int_q++;
   \       0x4A   0x3220             ADDS     R2,R2,#+32
    372                  p_int_q_next++;
   \       0x4C   0x3420             ADDS     R4,R4,#+32
    373              }
   \       0x4E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??OS_IntQTaskInit_3: (+1)
   \       0x50   0x002E             MOVS     R6,R5
   \       0x52   0x....             LDR      R7,??DataTable3_14
   \       0x54   0x883F             LDRH     R7,[R7, #+0]
   \       0x56   0xB2B6             UXTH     R6,R6
   \       0x58   0x42BE             CMP      R6,R7
   \       0x5A   0xD3EC             BCC      ??OS_IntQTaskInit_4
    374              p_int_q--;
   \       0x5C   0x3A20             SUBS     R2,R2,#+32
    375              p_int_q_next        = OSCfg_IntQBasePtr;
   \       0x5E   0x681B             LDR      R3,[R3, #+0]
    376              p_int_q->NextPtr    = p_int_q_next;
   \       0x60   0x6053             STR      R3,[R2, #+4]
    377              OSIntQInPtr         = p_int_q_next;
   \       0x62   0x....             LDR      R2,??DataTable3_17
   \       0x64   0x6013             STR      R3,[R2, #+0]
    378              OSIntQOutPtr        = p_int_q_next;
   \       0x66   0x....             LDR      R2,??DataTable3_10
   \       0x68   0x6013             STR      R3,[R2, #+0]
    379              OSIntQNbrEntries    = (OS_OBJ_QTY)0u;
   \       0x6A   0x000A             MOVS     R2,R1
   \       0x6C   0x....             LDR      R3,??DataTable3_18
   \       0x6E   0x801A             STRH     R2,[R3, #+0]
    380              OSIntQNbrEntriesMax = (OS_OBJ_QTY)0u;
   \       0x70   0x....             LDR      R2,??DataTable3_19
   \       0x72   0x8011             STRH     R1,[R2, #+0]
    381          
    382                                                                      /* -------------- CREATE THE ISR QUEUE TASK ------------- */
    383              if (OSCfg_IntQTaskStkBasePtr == (CPU_STK *)0) {
   \       0x74   0x....             LDR      R1,??DataTable3_20
   \       0x76   0x680A             LDR      R2,[R1, #+0]
   \       0x78   0x2A00             CMP      R2,#+0
   \       0x7A   0xD102             BNE      ??OS_IntQTaskInit_5
    384                 *p_err = OS_ERR_INT_Q_STK_INVALID;
   \       0x7C   0x....             LDR      R1,??DataTable3_21  ;; 0x4655
   \       0x7E   0x8001             STRH     R1,[R0, #+0]
    385                  return;
   \       0x80   0xE020             B        ??OS_IntQTaskInit_1
    386              }
    387          
    388              if (OSCfg_IntQTaskStkSize < OSCfg_StkSizeMin) {
   \                     ??OS_IntQTaskInit_5: (+1)
   \       0x82   0x....             LDR      R2,??DataTable3_22
   \       0x84   0x6813             LDR      R3,[R2, #+0]
   \       0x86   0x....             LDR      R4,??DataTable3_23
   \       0x88   0x6824             LDR      R4,[R4, #+0]
   \       0x8A   0x42A3             CMP      R3,R4
   \       0x8C   0xD202             BCS      ??OS_IntQTaskInit_6
    389                 *p_err = OS_ERR_INT_Q_STK_SIZE_INVALID;
   \       0x8E   0x....             LDR      R1,??DataTable3_24  ;; 0x4656
   \       0x90   0x8001             STRH     R1,[R0, #+0]
    390                  return;
   \       0x92   0xE017             B        ??OS_IntQTaskInit_1
    391              }
    392          
    393              OSTaskCreate((OS_TCB     *)&OSIntQTaskTCB,
    394                           (CPU_CHAR   *)((void *)"uC/OS-III ISR Queue Task"),
    395                           (OS_TASK_PTR )OS_IntQTask,
    396                           (void       *)0,
    397                           (OS_PRIO     )0u,                          /* This task is ALWAYS at priority '0' (i.e. highest)     */
    398                           (CPU_STK    *)OSCfg_IntQTaskStkBasePtr,
    399                           (CPU_STK_SIZE)OSCfg_IntQTaskStkLimit,
    400                           (CPU_STK_SIZE)OSCfg_IntQTaskStkSize,
    401                           (OS_MSG_QTY  )0u,
    402                           (OS_TICK     )0u,
    403                           (void       *)0,
    404                           (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    405                           (OS_ERR     *)p_err);
   \                     ??OS_IntQTaskInit_6: (+1)
   \       0x94   0x9008             STR      R0,[SP, #+32]
   \       0x96   0x2003             MOVS     R0,#+3
   \       0x98   0x9007             STR      R0,[SP, #+28]
   \       0x9A   0x2000             MOVS     R0,#+0
   \       0x9C   0x9006             STR      R0,[SP, #+24]
   \       0x9E   0x2000             MOVS     R0,#+0
   \       0xA0   0x9005             STR      R0,[SP, #+20]
   \       0xA2   0x2000             MOVS     R0,#+0
   \       0xA4   0x9004             STR      R0,[SP, #+16]
   \       0xA6   0x6810             LDR      R0,[R2, #+0]
   \       0xA8   0x9003             STR      R0,[SP, #+12]
   \       0xAA   0x....             LDR      R0,??DataTable3_25
   \       0xAC   0x6800             LDR      R0,[R0, #+0]
   \       0xAE   0x9002             STR      R0,[SP, #+8]
   \       0xB0   0x6808             LDR      R0,[R1, #+0]
   \       0xB2   0x9001             STR      R0,[SP, #+4]
   \       0xB4   0x2000             MOVS     R0,#+0
   \       0xB6   0x9000             STR      R0,[SP, #+0]
   \       0xB8   0x2300             MOVS     R3,#+0
   \       0xBA   0x....             LDR      R2,??DataTable3_26
   \       0xBC   0x....             LDR      R1,??DataTable3_27
   \       0xBE   0x....             LDR      R0,??DataTable3_28
   \       0xC0   0x....'....        BL       OSTaskCreate
    406          }
   \                     ??OS_IntQTaskInit_1: (+1)
   \       0xC4   0xB009             ADD      SP,SP,#+36
   \       0xC6   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x....'....        DC32     OSIntQNbrEntries

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     OSCfg_IntQSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x....'....        DC32     OSIntQNbrEntriesMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x....'....        DC32     OSIntQInPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x....'....        DC32     OSRdyList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x....'....        DC32     OSIntQTaskTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x....'....        DC32     OSPrioCur

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x....'....        DC32     OSPrioSaved

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \        0x0   0x....'....        DC32     OSIntQOvfCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \        0x0   0x....'....        DC32     OSIntQOutPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \        0x0   0x414D'4553        DC32     0x414d4553

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x0000'4653        DC32     0x4653

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x4741'4C46        DC32     0x47414c46

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x4749'5354        DC32     0x47495354

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x4753'4D54        DC32     0x47534d54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x4B43'4954        DC32     0x4b434954

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x5345'5254        DC32     0x53455254

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x5355'5354        DC32     0x53555354

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x5545'5551        DC32     0x55455551

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x....'....        DC32     OSTickTaskTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x....'....        DC32     OSIntQTaskTimeMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \        0x0   0x....'....        DC32     OSIntQOutPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \        0x0   0x....'....        DC32     OSIntQOvfCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \        0x0   0x....'....        DC32     OSCfg_IntQBasePtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \        0x0   0x0000'4652        DC32     0x4652

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \        0x0   0x....'....        DC32     OSCfg_IntQSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \        0x0   0x0000'4654        DC32     0x4654

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \        0x0   0x454E'4F4E        DC32     0x454e4f4e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \        0x0   0x....'....        DC32     OSIntQInPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \        0x0   0x....'....        DC32     OSIntQNbrEntries

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \        0x0   0x....'....        DC32     OSIntQNbrEntriesMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \        0x0   0x....'....        DC32     OSCfg_IntQTaskStkBasePtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \        0x0   0x0000'4655        DC32     0x4655

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \        0x0   0x....'....        DC32     OSCfg_IntQTaskStkSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \        0x0   0x....'....        DC32     OSCfg_StkSizeMin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_24:
   \        0x0   0x0000'4656        DC32     0x4656

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_25:
   \        0x0   0x....'....        DC32     OSCfg_IntQTaskStkLimit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_26:
   \        0x0   0x....'....        DC32     OS_IntQTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_27:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_28:
   \        0x0   0x....'....        DC32     OSIntQTaskTCB

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x75 0x43          DC8 "uC/OS-III ISR Queue Task"

   \              0x2F 0x4F    

   \              0x53 0x2D    

   \              0x49 0x49    

   \              0x49 0x20    

   \              0x49 0x53    

   \              0x52 0x20    

   \              0x51 0x75    

   \              0x65 0x75    

   \              0x65 0x20    

   \              0x54 0x61    

   \              0x73 0x6B    

   \              0x00
   \       0x19                      DS8 3
    407          
    408          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   OS_IntQPost
        40   -> CPU_SR_Restore
        40   -> CPU_SR_Save
        40   -> OS_PrioInsert
      24   OS_IntQRePost
        24   -> OS_FlagPost
        24   -> OS_QPost
        24   -> OS_SchedRoundRobin
        24   -> OS_SemPost
        24   -> OS_TaskQPost
        24   -> OS_TaskResume
        24   -> OS_TaskSemPost
        24   -> OS_TaskSuspend
      24   OS_IntQTask
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> OSSched
        24   -> OS_IntQRePost
        24   -> OS_PrioRemove
      56   OS_IntQTaskInit
        56   -> OSTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_26
       4  ??DataTable3_27
       4  ??DataTable3_28
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      28  ?_0
     164  OS_IntQPost
     246  OS_IntQRePost
     108  OS_IntQTask
     200  OS_IntQTaskInit

 
  28 bytes in section .rodata
 878 bytes in section .text
 
 878 bytes of CODE  memory
  28 bytes of CONST memory

Errors: none
Warnings: none
