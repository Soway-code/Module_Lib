###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.4.261/W32 for ARM         10/Jan/2021  16:10:28
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Source\BSP\system_stm32f0xx.c
#    Command line      =
#        -f C:\Users\macanlin\AppData\Local\Temp\EW5A2.tmp
#        ("C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Source\BSP\system_stm32f0xx.c" -D USE_STDPERIPH_DRIVER -D
#        STM32F072 -lC
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\List" -o
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        C:\rj\IAR\arm\inc\c\DLib_Config_Normal.h -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\BSP\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\FWLib\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\CMSIS\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\OS_Cfg\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-CPU\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-LIB\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uCOS-III\Ports\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uCOS-III\Source\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\APP\inc\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\FWLib\\" -I
#        "C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\..\Source\System\uC-LIB\\" -Ol -I
#        C:\rj\IAR\arm\CMSIS\Core\Include\\ -I
#        C:\rj\IAR\arm\CMSIS\DSP\Include\\)
#    Locale            =  C
#    List file         =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\List\system_stm32f0xx.lst
#    Object file       =
#        C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345
#        -1-9\Project\Debug\Obj\system_stm32f0xx.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\macanlin\Desktop\GD_modbus\Weight_F3_CarV1.1.5_ADXL345 -1-9\Source\BSP\system_stm32f0xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f0xx.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    17-January-2014
      7            * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32F0xx devices,
      9            *          and  is customized for use with STM32F072B-DISCOVERY Kit.  
     10            *
     11            *
     12            *          The STM32F072x is configured to run at 48 MHz, following the five  
     13            *          configuration below:
     14            *            - SOURCE_HSI48 (default)        : HSI48 (48MHz) used as system clock source.
     15            *            - PLL_SOURCE_HSI                : HSI (~8MHz) used to clock the PLL, and
     16            *                                              the PLL is used as system clock source.  
     17            *            - PLL_SOURCE_HSI48              : HSI48 (48MHz) used to clock the PLL, and 
     18            *                                              the PLL is used as system clock source.
     19            *            - PLL_SOURCE_HSE                : HSE (8MHz) used to clock the PLL, and 
     20            *                                              the PLL is used as system clock source.
     21            *            - PLL_SOURCE_HSE_BYPASS         : HSE bypassed with an external clock 
     22            *                                              (8MHz, coming from ST-Link) used to clock
     23            *                                              the PLL, and the PLL is used as system
     24            *                                              clock source.  
     25            * 
     26            *
     27            * 1.  This file provides two functions and one global variable to be called from 
     28            *     user application:
     29            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     30            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     31            *                      depending on the configuration made in the clock xls tool.
     32            *                      This function is called at startup just after reset and 
     33            *                      before branch to main program. This call is made inside
     34            *                      the "startup_stm32f0xx.s" file.
     35            *
     36            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     37            *                                  by the user application to setup the SysTick 
     38            *                                  timer or configure other parameters.
     39            *
     40            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     41            *                                 be called whenever the core clock is changed
     42            *                                 during program execution.
     43            *
     44            * 2. After each device reset the HSI (8 MHz Range) is used as system clock source.
     45            *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
     46            *    configure the system clock before to branch to main program.
     47            *
     48            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     49            *    function will do nothing and HSI still used as system clock source. User can 
     50            *    add some code to deal with this issue inside the SetSysClock() function.
     51            *
     52            * 4. The default value of HSE crystal is set to 8MHz, refer to "HSE_VALUE" define
     53            *    in "stm32f0xx.h" file. When HSE is used as system clock source, directly or
     54            *    through PLL, and you are using different crystal you have to adapt the HSE
     55            *    value to your own configuration.
     56            *
     57            ******************************************************************************
     58            * @attention
     59            *
     60            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     61            *
     62            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     63            * You may not use this file except in compliance with the License.
     64            * You may obtain a copy of the License at:
     65            *
     66            *        http://www.st.com/software_license_agreement_liberty_v2
     67            *
     68            * Unless required by applicable law or agreed to in writing, software 
     69            * distributed under the License is distributed on an "AS IS" BASIS, 
     70            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     71            * See the License for the specific language governing permissions and
     72            * limitations under the License.
     73            *
     74            ******************************************************************************
     75            */
     76          
     77          /** @addtogroup CMSIS
     78            * @{
     79            */
     80          
     81          /** @addtogroup stm32f0xx_system
     82            * @{
     83            */  
     84            
     85          /** @addtogroup STM32F0xx_System_Private_Includes
     86            * @{
     87            */
     88          
     89          #include "stm32f0xx.h"
     90          
     91          /**
     92            * @}
     93            */
     94          
     95          /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
     96            * @{
     97            */
     98          
     99          /**
    100            * @}
    101            */
    102          
    103          /** @addtogroup STM32F0xx_System_Private_Defines
    104            * @{
    105            */
    106          /**
    107            * @}
    108            */
    109          
    110          /*!< Uncomment the following line if you need to relocate your vector Table in
    111               Internal SRAM. */ 
    112          /* #define VECT_TAB_SRAM */
    113          #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field. 
    114                                            This value must be a multiple of 0x200. */ 
    115          
    116          /* Select the PLL clock source */
    117          
    118          //#define SOURCE_HSI48 
    119          //#define PLL_SOURCE_HSI48       /* HSI48 (48MHz) used to clock USB, system clock and the PLL*/
    120          #define PLL_SOURCE_HSI        /* HSI (~8MHz) used to clock the PLL, and the PLL is used as system clock source*/
    121          //#define PLL_SOURCE_HSE        /* HSE (8MHz) used to clock the PLL, and the PLL is used as system clock source */
    122          //#define PLL_SOURCE_HSE_BYPASS   /* HSE bypassed with an external clock (8MHz, coming from ST-Link) used to clock
    123          //                                   the PLL, and the PLL is used as system clock source */
    124              
    125          
    126          /** @addtogroup STM32F0xx_System_Private_Macros
    127            * @{
    128            */
    129          
    130          /**
    131            * @}
    132            */
    133          
    134          /** @addtogroup STM32F0xx_System_Private_Variables
    135            * @{
    136            */

   \                                 In section .data, align 4
    137          uint32_t SystemCoreClock    = 48000000;
   \                     SystemCoreClock:
   \        0x0   0x02DC'6C00        DC32 48'000'000

   \                                 In section .data, align 4
    138          __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
   \                     AHBPrescTable:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x01 0x02    

   \              0x03 0x04    

   \              0x06 0x07    

   \              0x08 0x09
    139          
    140          /**
    141            * @}
    142            */
    143          
    144          /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
    145            * @{
    146            */
    147          
    148          static void SetSysClock(void);
    149          
    150          /**
    151            * @}
    152            */
    153          
    154          /** @addtogroup STM32F0xx_System_Private_Functions
    155            * @{
    156            */
    157          
    158          /**
    159            * @brief  Setup the microcontroller system.
    160            *         Initialize the Embedded Flash Interface, the PLL and update the 
    161            *         SystemCoreClock variable.
    162            * @param  None
    163            * @retval None
    164            */

   \                                 In section .text, align 2, keep-with-next
    165          void SystemInit (void)
    166          {    
   \                     SystemInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    167            /* Set HSION bit */
    168            RCC->CR |= (uint32_t)0x00000001;
   \        0x2   0x....             LDR      R0,??DataTable2  ;; 0x40021000
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0x2201             MOVS     R2,#+1
   \        0x8   0x430A             ORRS     R2,R2,R1
   \        0xA   0x6002             STR      R2,[R0, #+0]
    169          
    170            /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[3:0] bits MCOPRE[2:0] */
    171            RCC->CFGR &= (uint32_t)0x80FFB80C;
   \        0xC   0x....             LDR      R1,??DataTable2_1  ;; 0x40021004
   \        0xE   0x680A             LDR      R2,[R1, #+0]
   \       0x10   0x....             LDR      R3,??DataTable2_2  ;; 0x80ffb80c
   \       0x12   0x4013             ANDS     R3,R3,R2
   \       0x14   0x600B             STR      R3,[R1, #+0]
    172            
    173            /* Reset HSEON, CSSON and PLLON bits */
    174            RCC->CR &= (uint32_t)0xFEF6FFFF;
   \       0x16   0x6802             LDR      R2,[R0, #+0]
   \       0x18   0x....             LDR      R3,??DataTable2_3  ;; 0xfef6ffff
   \       0x1A   0x4013             ANDS     R3,R3,R2
   \       0x1C   0x6003             STR      R3,[R0, #+0]
    175          
    176            /* Reset HSEBYP bit */
    177            RCC->CR &= (uint32_t)0xFFFBFFFF;
   \       0x1E   0x6802             LDR      R2,[R0, #+0]
   \       0x20   0x....             LDR      R3,??DataTable2_4  ;; 0xfffbffff
   \       0x22   0x4013             ANDS     R3,R3,R2
   \       0x24   0x6003             STR      R3,[R0, #+0]
    178          
    179            /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
    180            RCC->CFGR &= (uint32_t)0xFFC07FFF;
   \       0x26   0x6808             LDR      R0,[R1, #+0]
   \       0x28   0x....             LDR      R2,??DataTable2_5  ;; 0xffc07fff
   \       0x2A   0x4002             ANDS     R2,R2,R0
   \       0x2C   0x600A             STR      R2,[R1, #+0]
    181          
    182            /* Reset PREDIV1[3:0] bits */
    183            RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
   \       0x2E   0x....             LDR      R0,??DataTable2_6  ;; 0x4002102c
   \       0x30   0x6801             LDR      R1,[R0, #+0]
   \       0x32   0x220F             MOVS     R2,#+15
   \       0x34   0x4391             BICS     R1,R1,R2
   \       0x36   0x6001             STR      R1,[R0, #+0]
    184          
    185            /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
    186            RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
   \       0x38   0x....             LDR      R0,??DataTable2_7  ;; 0x40021030
   \       0x3A   0x6801             LDR      R1,[R0, #+0]
   \       0x3C   0x....             LDR      R2,??DataTable2_8  ;; 0xfffffeac
   \       0x3E   0x400A             ANDS     R2,R2,R1
   \       0x40   0x6002             STR      R2,[R0, #+0]
    187            
    188            /* Reset HSI14 & HSI48 bit */
    189            RCC->CR2 &= (uint32_t)0xFFFEFFFE;
   \       0x42   0x....             LDR      R0,??DataTable2_9  ;; 0x40021034
   \       0x44   0x6801             LDR      R1,[R0, #+0]
   \       0x46   0x....             LDR      R2,??DataTable2_10  ;; 0xfffefffe
   \       0x48   0x400A             ANDS     R2,R2,R1
   \       0x4A   0x6002             STR      R2,[R0, #+0]
    190          
    191            /* Disable all interrupts */
    192            RCC->CIR = 0x00000000;
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0x....             LDR      R1,??DataTable2_11  ;; 0x40021008
   \       0x50   0x6008             STR      R0,[R1, #+0]
    193          
    194            /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
    195            SetSysClock();
   \       0x52   0x....'....        BL       SetSysClock
    196          }
   \       0x56   0xBD01             POP      {R0,PC}          ;; return
    197          
    198          /**
    199            * @brief  Update SystemCoreClock according to Clock Register Values
    200            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    201            *         be used by the user application to setup the SysTick timer or configure
    202            *         other parameters.
    203            *
    204            * @note   Each time the core clock (HCLK) changes, this function must be called
    205            *         to update SystemCoreClock variable value. Otherwise, any configuration
    206            *         based on this variable will be incorrect.         
    207            *
    208            * @note   - The system frequency computed by this function is not the real 
    209            *           frequency in the chip. It is calculated based on the predefined 
    210            *           constant and the selected clock source:
    211            *
    212            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    213            *                                              
    214            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    215            *                          
    216            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
    217            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    218            * @note     - If SYSCLK source is HSI48, function returns constant HSI48_VALUE(***) 
    219            *
    220            *         (*) HSI_VALUE is a constant defined in stm32f0xx.h file (default value
    221            *             8 MHz) but the real value may vary depending on the variations
    222            *             in voltage and temperature.
    223            *
    224            *         (**) HSE_VALUE is a constant defined in stm32f0xx.h file (default value
    225            *              8 MHz), user has to ensure that HSE_VALUE is same as the real
    226            *              frequency of the crystal used. Otherwise, this function may
    227            *              have wrong result.
    228            * @note  (***) HSI48_VALUE is a constant defined in stm32f0xx.h file (default value
    229            *              48 MHz) but the real value may vary depending on the variations
    230            *              in voltage and temperature.
    231            *
    232            *         - The result of this function could be not correct when using fractional
    233            *           value for HSE crystal.
    234            * @param  None
    235            * @retval None
    236            */

   \                                 In section .text, align 2, keep-with-next
    237          void SystemCoreClockUpdate (void)
    238          {
   \                     SystemCoreClockUpdate: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
    239            uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x0008             MOVS     R0,R1
   \        0x6   0x0008             MOVS     R0,R1
   \        0x8   0x0008             MOVS     R0,R1
    240          
    241            /* Get SYSCLK source -------------------------------------------------------*/
    242            tmp = RCC->CFGR & RCC_CFGR_SWS;
   \        0xA   0x....             LDR      R4,??DataTable2_1  ;; 0x40021004
   \        0xC   0x6821             LDR      R1,[R4, #+0]
   \        0xE   0x200C             MOVS     R0,#+12
   \       0x10   0x4008             ANDS     R0,R0,R1
    243            
    244            switch (tmp)
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD006             BEQ      ??SystemCoreClockUpdate_0
   \       0x16   0x2804             CMP      R0,#+4
   \       0x18   0xD008             BEQ      ??SystemCoreClockUpdate_1
   \       0x1A   0x2808             CMP      R0,#+8
   \       0x1C   0xD00A             BEQ      ??SystemCoreClockUpdate_2
   \       0x1E   0x280C             CMP      R0,#+12
   \       0x20   0xD025             BEQ      ??SystemCoreClockUpdate_3
   \       0x22   0xE028             B        ??SystemCoreClockUpdate_4
    245            {
    246            case 0x00:  /* HSI used as system clock */
    247              SystemCoreClock = HSI_VALUE;
   \                     ??SystemCoreClockUpdate_0: (+1)
   \       0x24   0x....             LDR      R0,??DataTable2_12  ;; 0x7a1200
   \       0x26   0x....             LDR      R1,??DataTable2_13
   \       0x28   0x6008             STR      R0,[R1, #+0]
    248              break;
   \       0x2A   0xE027             B        ??SystemCoreClockUpdate_5
    249            case 0x04:  /* HSE used as system clock */
    250              SystemCoreClock = HSE_VALUE;
   \                     ??SystemCoreClockUpdate_1: (+1)
   \       0x2C   0x....             LDR      R0,??DataTable2_12  ;; 0x7a1200
   \       0x2E   0x....             LDR      R1,??DataTable2_13
   \       0x30   0x6008             STR      R0,[R1, #+0]
    251              break;
   \       0x32   0xE023             B        ??SystemCoreClockUpdate_5
    252            case 0x08:  /* PLL used as system clock */
    253              /* Get PLL clock source and multiplication factor ----------------------*/
    254              pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
   \                     ??SystemCoreClockUpdate_2: (+1)
   \       0x34   0x6821             LDR      R1,[R4, #+0]
   \       0x36   0x20F0             MOVS     R0,#+240
   \       0x38   0x0380             LSLS     R0,R0,#+14       ;; #+3932160
   \       0x3A   0x4008             ANDS     R0,R0,R1
    255              pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
   \       0x3C   0x6822             LDR      R2,[R4, #+0]
   \       0x3E   0x21C0             MOVS     R1,#+192
   \       0x40   0x0249             LSLS     R1,R1,#+9        ;; #+98304
   \       0x42   0x4011             ANDS     R1,R1,R2
    256              pllmull = ( pllmull >> 18) + 2;
   \       0x44   0x0C85             LSRS     R5,R0,#+18
   \       0x46   0x1CAD             ADDS     R5,R5,#+2
    257              
    258              if (pllsource == 0x00)
   \       0x48   0x2900             CMP      R1,#+0
   \       0x4A   0xD104             BNE      ??SystemCoreClockUpdate_6
    259              {
    260                /* HSI oscillator clock divided by 2 selected as PLL clock entry */
    261                SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
   \       0x4C   0x....             LDR      R0,??DataTable2_14  ;; 0x3d0900
   \       0x4E   0x4345             MULS     R5,R0,R5
   \       0x50   0x....             LDR      R0,??DataTable2_13
   \       0x52   0x6005             STR      R5,[R0, #+0]
   \       0x54   0xE00A             B        ??SystemCoreClockUpdate_7
    262              }
    263              else
    264              {
    265                prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
   \                     ??SystemCoreClockUpdate_6: (+1)
   \       0x56   0x....             LDR      R0,??DataTable2_6  ;; 0x4002102c
   \       0x58   0x6800             LDR      R0,[R0, #+0]
   \       0x5A   0x0701             LSLS     R1,R0,#+28       ;; ZeroExtS R1,R0,#+28,#+28
   \       0x5C   0x0F09             LSRS     R1,R1,#+28
   \       0x5E   0x1C49             ADDS     R1,R1,#+1
    266                /* HSE oscillator clock selected as PREDIV1 clock entry */
    267                SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
   \       0x60   0x....             LDR      R0,??DataTable2_12  ;; 0x7a1200
   \       0x62   0x....'....        BL       __aeabi_uidiv
   \       0x66   0x4368             MULS     R0,R5,R0
   \       0x68   0x....             LDR      R1,??DataTable2_13
   \       0x6A   0x6008             STR      R0,[R1, #+0]
    268              }      
    269              break;
   \                     ??SystemCoreClockUpdate_7: (+1)
   \       0x6C   0xE006             B        ??SystemCoreClockUpdate_5
    270            case 0x0C:  /* HSI48 used as system clock */
    271              SystemCoreClock = HSI48_VALUE;
   \                     ??SystemCoreClockUpdate_3: (+1)
   \       0x6E   0x....             LDR      R0,??DataTable2_15  ;; 0x2dc6c00
   \       0x70   0x....             LDR      R1,??DataTable2_13
   \       0x72   0x6008             STR      R0,[R1, #+0]
    272              break;
   \       0x74   0xE002             B        ??SystemCoreClockUpdate_5
    273            default: /* HSI used as system clock */
    274              SystemCoreClock = HSI_VALUE;
   \                     ??SystemCoreClockUpdate_4: (+1)
   \       0x76   0x....             LDR      R0,??DataTable2_12  ;; 0x7a1200
   \       0x78   0x....             LDR      R1,??DataTable2_13
   \       0x7A   0x6008             STR      R0,[R1, #+0]
    275              break;
    276              
    277            }
    278            /* Compute HCLK clock frequency ----------------*/
    279            /* Get HCLK prescaler */
    280            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
   \                     ??SystemCoreClockUpdate_5: (+1)
   \       0x7C   0x6820             LDR      R0,[R4, #+0]
   \       0x7E   0x....             LDR      R1,??DataTable2_16
   \       0x80   0x0900             LSRS     R0,R0,#+4
   \       0x82   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \       0x84   0x0F00             LSRS     R0,R0,#+28
   \       0x86   0x5C08             LDRB     R0,[R1, R0]
    281            /* HCLK clock frequency */
    282            SystemCoreClock >>= tmp;  
   \       0x88   0x....             LDR      R1,??DataTable2_13
   \       0x8A   0x680A             LDR      R2,[R1, #+0]
   \       0x8C   0x40C2             LSRS     R2,R2,R0
   \       0x8E   0x600A             STR      R2,[R1, #+0]
    283          }
   \       0x90   0xBD30             POP      {R4,R5,PC}       ;; return
    284          
    285          /**
    286            * @brief  Configures the System clock frequency, AHB/APBx prescalers and Flash
    287            *         settings.
    288            * @note   This function should be called only once the RCC clock configuration
    289            *         is reset to the default reset state (done in SystemInit() function).
    290            * @param  None
    291            * @retval None
    292            */

   \                                 In section .text, align 2, keep-with-next
    293          static void SetSysClock(void)
    294          {
   \                     SetSysClock: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    295            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x9000             STR      R0,[SP, #+0]
   \        0x6   0x9000             STR      R0,[SP, #+0]
    296            
    297            /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
    298              /* At this stage the HSI is already enabled */
    299           
    300              /* Enable Prefetch Buffer and set Flash Latency */
    301              FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
   \        0x8   0x2011             MOVS     R0,#+17
   \        0xA   0x....             LDR      R1,??DataTable2_17  ;; 0x40022000
   \        0xC   0x6008             STR      R0,[R1, #+0]
    302           
    303              /* HCLK = SYSCLK */
    304              RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
   \        0xE   0x....             LDR      R0,??DataTable2_1  ;; 0x40021004
   \       0x10   0x6801             LDR      R1,[R0, #+0]
   \       0x12   0x6001             STR      R1,[R0, #+0]
    305                
    306              /* PCLK = HCLK */
    307              RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
   \       0x14   0x6801             LDR      R1,[R0, #+0]
   \       0x16   0x6001             STR      R1,[R0, #+0]
    308             
    309          #ifndef SOURCE_HSI48
    310          
    311           #if defined (PLL_SOURCE_HSI)   
    312              /* PLL configuration = HSI * 6 = 48 MHz */
    313              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
   \       0x18   0x6801             LDR      R1,[R0, #+0]
   \       0x1A   0x....             LDR      R2,??DataTable2_5  ;; 0xffc07fff
   \       0x1C   0x400A             ANDS     R2,R2,R1
   \       0x1E   0x6002             STR      R2,[R0, #+0]
    314              RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_PREDIV | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
   \       0x20   0x6801             LDR      R1,[R0, #+0]
   \       0x22   0x2284             MOVS     R2,#+132
   \       0x24   0x0352             LSLS     R2,R2,#+13       ;; #+1081344
   \       0x26   0x430A             ORRS     R2,R2,R1
   \       0x28   0x6002             STR      R2,[R0, #+0]
    315           #elif defined (PLL_SOURCE_HSI48)
    316             /* Enable HSI48 */   
    317              RCC->CR2 |= RCC_CR2_HSI48ON; 
    318              /* PLL configuration = HSI48 * 1 = 48 MHz */
    319              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    320              RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI48_PREDIV | RCC_CFGR_PLLXTPRE_PREDIV1_Div2);
    321            
    322           #else  
    323             /* Enable HSE */    
    324             RCC->CR |= ((uint32_t)RCC_CR_HSEON);    
    325             #if defined (PLL_SOURCE_HSE_BYPASS)
    326              /* HSE oscillator bypassed with external clock */    
    327              RCC->CR |= (uint32_t)(RCC_CR_HSEBYP);
    328             #endif 
    329             /* Wait till HSE is ready and if Time out is reached exit */
    330             do
    331             {
    332              HSEStatus = RCC->CR & RCC_CR_HSERDY;
    333              StartUpCounter++;  
    334             } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    335          
    336            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    337            {
    338              HSEStatus = (uint32_t)0x01;
    339            }
    340            else
    341            {
    342              HSEStatus = (uint32_t)0x00;
    343            }  
    344          
    345            if (HSEStatus == (uint32_t)0x01)
    346            {
    347              /* PLL configuration = HSE * 6 = 48 MHz */
    348              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    349              RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
    350                      
    351            }
    352            else
    353            { /* If HSE fails to start-up, the application will have wrong clock 
    354                   configuration. User can add here some code to deal with this error */
    355            }  
    356          
    357          
    358          
    359           #endif /* PLL_SOURCE_HSI */ 
    360              /* Enable PLL */
    361            RCC->CR |= RCC_CR_PLLON;
   \       0x2A   0x....             LDR      R1,??DataTable2  ;; 0x40021000
   \       0x2C   0x680A             LDR      R2,[R1, #+0]
   \       0x2E   0x2380             MOVS     R3,#+128
   \       0x30   0x045B             LSLS     R3,R3,#+17       ;; #+16777216
   \       0x32   0x4313             ORRS     R3,R3,R2
   \       0x34   0x600B             STR      R3,[R1, #+0]
    362          
    363            /* Wait till PLL is ready */
    364            while((RCC->CR & RCC_CR_PLLRDY) == 0)
   \                     ??SetSysClock_0: (+1)
   \       0x36   0x680A             LDR      R2,[R1, #+0]
   \       0x38   0x0192             LSLS     R2,R2,#+6
   \       0x3A   0xD5FC             BPL      ??SetSysClock_0
    365            {
    366            }
    367          
    368            /* Select PLL as system clock source */
    369            RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
   \       0x3C   0x6801             LDR      R1,[R0, #+0]
   \       0x3E   0x2203             MOVS     R2,#+3
   \       0x40   0x4391             BICS     R1,R1,R2
   \       0x42   0x6001             STR      R1,[R0, #+0]
    370            RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
   \       0x44   0x6801             LDR      R1,[R0, #+0]
   \       0x46   0x2202             MOVS     R2,#+2
   \       0x48   0x430A             ORRS     R2,R2,R1
   \       0x4A   0x6002             STR      R2,[R0, #+0]
    371          
    372            /* Wait till PLL is used as system clock source */
    373            while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
   \                     ??SetSysClock_1: (+1)
   \       0x4C   0x6801             LDR      R1,[R0, #+0]
   \       0x4E   0x220C             MOVS     R2,#+12
   \       0x50   0x400A             ANDS     R2,R2,R1
   \       0x52   0x2A08             CMP      R2,#+8
   \       0x54   0xD1FA             BNE      ??SetSysClock_1
    374            {
    375            }  
    376          #else
    377             /* Enable HSI48 */   
    378              RCC->CR2 |= RCC_CR2_HSI48ON;
    379            /* Wait till HSI48RDY is set */
    380              while((RCC->CR2 & RCC_CR2_HSI48RDY) == 0)
    381              { }
    382            /* Select HSI48 as system clock source */
    383              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    384              RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI48;     
    385            
    386          #endif
    387           
    388          }
   \       0x56   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x4002'1000        DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x4002'1004        DC32     0x40021004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x80FF'B80C        DC32     0x80ffb80c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0xFEF6'FFFF        DC32     0xfef6ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0xFFFB'FFFF        DC32     0xfffbffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0xFFC0'7FFF        DC32     0xffc07fff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x4002'102C        DC32     0x4002102c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x4002'1030        DC32     0x40021030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \        0x0   0xFFFF'FEAC        DC32     0xfffffeac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \        0x0   0x4002'1034        DC32     0x40021034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \        0x0   0xFFFE'FFFE        DC32     0xfffefffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \        0x0   0x4002'1008        DC32     0x40021008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \        0x0   0x007A'1200        DC32     0x7a1200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \        0x0   0x....'....        DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \        0x0   0x003D'0900        DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \        0x0   0x02DC'6C00        DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \        0x0   0x....'....        DC32     AHBPrescTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \        0x0   0x4002'2000        DC32     0x40022000
    389          
    390          /**
    391            * @}
    392            */
    393          
    394          /**
    395            * @}
    396            */
    397          
    398          /**
    399            * @}
    400            */
    401          
    402          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SetSysClock
      12   SystemCoreClockUpdate
        12 __aeabi_uidiv
       8   SystemInit
         8   -> SetSysClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      16  AHBPrescTable
      88  SetSysClock
       4  SystemCoreClock
     146  SystemCoreClockUpdate
      88  SystemInit

 
  20 bytes in section .data
 394 bytes in section .text
 
 394 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
